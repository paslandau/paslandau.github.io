<?xml version = "1.0" encoding = "UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>pascallandau.com [codeproject]</title>
        <description>Pascal Landau's Blog - Development related posts only</description>
        <link>https://www.pascallandau.com</link>
        <atom:link href="https://www.pascallandau.com/feed-codeproject-com.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Tue, 18 Apr 2023 06:52:58 +0000</pubDate>
        <lastBuildDate>Tue, 18 Apr 2023 06:52:58 +0000</lastBuildDate>
        <language>en</language>
        <category>CodeProject</category>
                    <item>
                <title>Use docker compose for production deployments of a PHP App on GCP [Tutorial Part 9]</title>
                <description><![CDATA[<p>This article appeared first on <a href='https://www.pascallandau.com/'>https://www.pascallandau.com/</a> at <a href='https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/'>Use docker compose for production deployments of a PHP App on GCP [Tutorial Part 9]</a></p>
<hr />

<p>In the ninth part of this tutorial series on developing PHP on Docker we will 
<strong>deploy our dockerized PHP application to a production environment</strong> (a GCP Compute Instance VM)
and <strong>run it via <code>docker compose</code> as a proof of concept</strong>.</p>

<div class="youtube">
<iframe width="560" height="315" src="https://www.youtube.com/embed/I6gaVR21fnw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<p><strong>All code samples are publicly available</strong> in my
<a href="https://github.com/paslandau/docker-php-tutorial/">Docker PHP Tutorial repository on Github</a>.<br />
You find the branch with the final result of this tutorial at
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-9-deploy-docker-compose-php-gcp-poc">part-9-deploy-docker-compose-php-gcp-poc</a>.</p>

<p><strong>All published parts of the Docker PHP Tutorial</strong> are collected under a dedicated page at
<a href="https://www.pascallandau.com/docker-php-tutorial/">Docker PHP Tutorial</a>. The previous part was
<a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker">Create a GCP Compute Instance VM for dockerized PHP Apps</a>.</p>

<p>If you want to follow along, please subscribe to the <a href="https://www.pascallandau.com/feed.xml">RSS feed</a>
or <a href="#newsletter">via email</a> to get <strong>automatic notifications</strong> when the next part comes out :)</p>

<p><!-- generated -->
<a id='table-of-contents'> </a>
<!-- /generated --></p>

<h2>Table of contents</h2>

<!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#deployment-workflow">Deployment workflow</a>

<ul>
<li><a href="#the-deploy-target">The <code>deploy</code> target</a></li>
<li><a href="#avoiding-code-drift">Avoiding code drift</a></li>
<li><a href="#the-build-info-file">The <code>build-info</code> file</a></li>
<li><a href="#build-and-push-the-docker-images">Build and push the <code>docker</code> images</a></li>
<li><a href="#create-the-deployment-archive">Create the deployment archive</a></li>
<li><a href="#deployment-commands-on-the-vm">Deployment commands on the VM</a>

<ul>
<li><a href="#the-deploy-sh-script">The <code>deploy.sh</code> script</a></li>
</ul></li>
</ul></li>
<li><a href="#codebase-changes">Codebase changes</a>

<ul>
<li><a href="#restructure-the-codebase">Restructure the codebase</a>

<ul>
<li><a href="#the-build-directory">The <code>.build</code> directory</a></li>
<li><a href="#the-secrets-directory">The <code>.secrets</code> directory</a></li>
<li><a href="#the-tutorial-directory">The <code>.tutorial</code> directory</a></li>
<li><a href="#the-infrastructure-directory">The <code>.infrastructure</code> directory</a></li>
</ul></li>
<li><a href="#add-a-gpg-key-for-production">Add a <code>gpg</code> key for production</a></li>
<li><a href="#show-the-build-info">Show the <code>build-info</code></a></li>
<li><a href="#optimize-gitignore">Optimize <code>.gitignore</code></a></li>
</ul></li>
<li><a href="#docker-changes">Docker changes</a>

<ul>
<li><a href="#a-env-file-for-prod">A <code>.env</code> file for <code>prod</code></a></li>
<li><a href="#updating-the-docker-compose-yml-configuration-files">Updating the <code>docker-compose.yml</code> configuration files</a>

<ul>
<li><a href="#docker-compose-local-ci-prod-yml"><code>docker-compose.local.ci.prod.yml</code></a></li>
<li><a href="#docker-compose-local-prod-yml"><code>docker-compose.local.prod.yml</code></a></li>
<li><a href="#docker-compose-prod-yml"><code>docker-compose.prod.yml</code></a></li>
</ul></li>
<li><a href="#adjust-the-dockerignore-file">Adjust the <code>.dockerignore</code> file</a></li>
<li><a href="#build-target-prod">Build target: <code>prod</code></a>

<ul>
<li><a href="#build-stage-prod-in-the-php-base-image">Build stage <code>prod</code> in the <code>php-base</code> image</a>

<ul>
<li><a href="#env-based-branching"><code>ENV</code> based branching</a></li>
<li><a href="#avoid-composer-dev-dependencies">Avoid composer dev dependencies</a></li>
<li><a href="#remove-unnecessary-directories">Remove unnecessary directories</a></li>
<li><a href="#remove-secrets-for-other-environments">Remove secrets for other environments</a></li>
<li><a href="#decrypt-the-secrets-via-entrypoint">Decrypt the secrets via <code>ENTRYPOINT</code></a></li>
<li><a href="#copy-codebase-and-build-info-file">Copy codebase and <code>build-info</code> file</a></li>
</ul></li>
<li><a href="#build-stage-prod-in-the-remaining-images">Build stage <code>prod</code> in the remaining images</a></li>
</ul></li>
</ul></li>
<li><a href="#makefile-changes">Makefile changes</a>

<ul>
<li><a href="#adding-gcp-values-to-make-variables-env">Adding GCP values to <code>.make/variables.env</code></a></li>
<li><a href="#env-based-docker-compose-config">ENV based <code>docker compose</code> config</a></li>
<li><a href="#changes-to-the-git-secret-recipes">Changes to the <code>git-secret</code> recipes</a></li>
<li><a href="#additional-docker-recipes">Additional <code>docker</code> recipes</a></li>
<li><a href="#gcp-recipes">GCP recipes</a></li>
<li><a href="#infrastructure-recipes">Infrastructure recipes</a></li>
<li><a href="#deployment-recipes">Deployment recipes</a></li>
</ul></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ul>

<!-- /toc -->

<p><!-- generated -->
<a id='introduction'> </a>
<!-- /generated --></p>

<h2>Introduction</h2>

<p>In the previous tutorial
<a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/">Create a GCP compute instance VM to run dockerized applications</a>
we have created a Compute Instance VM on GCP and prepared it to run <code>docker</code> containers. For 
this tutorial I made a small adjustment and changed the machine type from <code>e2-micro</code> to
<code>e2-small</code> because we need a little more memory to run the whole application.</p>

<p>In this tutorial, we will use the VM as a <strong>production environment</strong>, i.e. we will</p>

<ul>
<li>prepare our <code>docker</code> setup for production usage</li>
<li>build and push the production-ready <code>docker</code> images to the GCP registry from our local system</li>
<li>pull and start the images on the VM</li>
</ul>

<p>The whole process will be defined <a href="#the-deploy-target">in a single <code>make</code> target called <code>deploy</code></a>.</p>

<p><strong>To try it yourself:</strong></p>

<div class="panel panel-default">
  <div class="panel-heading">
    <strong>Caution</strong>
  </div>
  <div class="panel-body bg-danger">
    The following steps <strong>will create actual infrastructure on GCP</strong> which means you
    will create costs (albeit quite little). Please make sure to shut the project down once you are
    done, see <a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/#cleanup">Cleanup</a> of the previous
    tutorial.
  </div>
</div>

<ul>
<li>create an account on GCP, <a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/#preconditions-project-and-owner-service-account">a project and a master service account</a>

<ul>
<li><a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/#create-service-account-key-file">create a keyfile</a> 
for the service account, name it <code>gcp-master-service-account-key.json</code> and move it to the 
root of the repository</li>
</ul></li>
<li>checkout branch
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-9-deploy-docker-compose-php-gcp-poc">part-9-deploy-docker-compose-php-gcp-poc</a></li>
<li>update the <code>.make/variables.env</code> file with your GCP project id and VM name</li>
<li>initialize local docker setup via

<ul>
<li>copying the secret gpg key to the root of the repository via 
<code>bash
cp .tutorial/secret.gpg.example ./secret.gpg</code></li>
<li>initializing the shared variables via <code>make make-init</code></li>
<li>building the docker setup via <code>make docker-build</code></li>
<li>start the docker setup via <code>make docker-up</code></li>
<li>decrypt the secrets via 
<code>make gpg-init
make secret-decrypt</code></li>
</ul></li>
<li>run the script located at <code>.infrastructure/setup-gcp.sh</code> to create a GCP VM</li>
<li>run <code>make deploy IGNORE_UNCOMMITTED_CHANGES=true</code> to deploy the application</li>
<li>run <code>make deployment-setup-db-on-vm</code> to run the DB migrations</li>
<li>run <code>make gcp-show-ip</code> to retrieve the public IP of the VM and open it in a browser</li>
</ul>

<pre>project_id=my-new-project100
vm_name=my-vm-name

git checkout part-9-deploy-docker-compose-php-gcp-poc
sed -i "s/pl-dofroscra-p/${project_id}/g" .make/variables.env
sed -i "s/dofroscra-test/${vm_name}/g" .make/variables.env
cp .tutorial/secret.gpg.example ./secret.gpg
make make-init
make docker-build
make docker-up
make gpg-init
make secret-decrypt
bash .infrastructure/setup-gcp.sh $project_id $vm_name
make deploy IGNORE_UNCOMMITTED_CHANGES=true
make deployment-setup-db-on-vm
echo "http://$(make -s gcp-show-ip)/"
</pre>

<p><strong>Note: It can take a couple of minutes until the infrastructure is up and running.</strong></p>

<div class="panel panel-default">
  <div class="panel-heading">
    <strong>Caution</strong>
  </div>
  <div class="panel-body bg-danger">
    Please consider this whole tutorial <strong>only as a POC</strong>! 
    <code>docker compose</code> should not be
    used on a single VM in a production setup, because one huge benefit of docker is the separation
    of services into horizontally scalable containers. Using a single VM would pretty much defeat
    the purpose. <br>
    <br>
    In addition, we will use <code>docker</code> containers for the 
    <code>mysql</code> and <code>redis</code> databases. It would be far better to use 
    managed services like
    <a href ="https://cloud.google.com/memorystore/docs/redis">Memorystore for <code>redis</code></a> and
    <a href ="https://cloud.google.com/sql/docs/mysql">Cloud SQL for <code>mysql</code></a>
    so that we don't have to deal with backups etc. ourselves.
  </div>
</div>

<p><strong>Note:</strong> 
We will tackle those issues and "remove" the POC status in the next part of the tutorial series.</p>

<p><!-- generated -->
<a id='deployment-workflow'> </a>
<!-- /generated --></p>

<h2>Deployment workflow</h2>

<p>As a precondition we expect <a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/#the-actual-vm-creation">that a GCP VM is up and running</a>.
The basic idea of the deployment is:</p>

<ul>
<li>build the <code>docker</code> images using the <code>prod</code> environment and <strong>push</strong> them to the remote registry</li>
<li>log into the VM and <strong>pull</strong> the images</li>
<li>use <code>docker compose</code> on the VM to <strong>start</strong> the <code>docker</code> setup</li>
</ul>

<video controls>
  <source src="https://www.pascallandau.com/img/deploy-docker-compose-php-gcp-poc/deployment-workflow.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>

<p>This shouldn't be too complicated - we already do the same thing locally, don't we? In theory:
Yes. In practice, there is <strong>one major difference: Locally, we have access to our repository</strong>,
including the files for running</p>

<ul>
<li>the <code>docker</code> setup (=> the <code>.docker</code> directory)</li>
<li>the <code>make</code> setup to control the application (=> the <code>Makefile</code> and the <code>.make</code> directory)</li>
</ul>

<p>Fortunately we can solve this issue easily and provide a single <code>make</code> target named <code>deploy</code>
that will take care of everything.</p>

<p><!-- generated -->
<a id='the-deploy-target'> </a>
<!-- /generated --></p>

<h3>The <code>deploy</code> target</h3>

<p>The <code>deploy</code> target runs all necessary commands for a deployment:</p>

<p>Run safeguard checks to <a href="#avoiding-code-drift">avoid code drift</a></p>

<pre>    @printf "$(GREEN)Switching to 'local' environment$(NO_COLOR)\n"
    @make --no-print-directory make-init
    @printf "$(GREEN)Starting docker setup locally$(NO_COLOR)\n"
    @make --no-print-directory docker-up
    @printf "$(GREEN)Verifying that there are no changes in the secrets$(NO_COLOR)\n"
    @make --no-print-directory gpg-init
    @make --no-print-directory deployment-guard-secret-changes
    @printf "$(GREEN)Verifying that there are no uncommitted changes in the codebase$(NO_COLOR)\n"
    @make --no-print-directory deployment-guard-uncommitted-changes
</pre>

<p>Make sure the <a href="#gcp-recipes"><code>gcloud</code> cli is initialized</a> with the GCP deployment service
account and that this account is also used to authenticate docker. Otherwise, we won't be able
to push images to our GCP container registry.</p>

<pre>    @printf "$(GREEN)Initializing gcloud$(NO_COLOR)\n"
    @make --no-print-directory gcp-init
</pre>

<p>Enable the <code>prod</code> environment for the <code>make</code> setup, see section
<a href="#env-based-docker-compose-config">ENV based <code>docker compose</code> config</a></p>

<pre>    @printf "$(GREEN)Switching to 'prod' environment$(NO_COLOR)\n"
    @make --no-print-directory make-init ENVS="ENV=prod TAG=latest"
</pre>

<p>Create <a href="#the-build-info-file">the <code>build-info</code> file</a></p>

<pre>    @printf "$(GREEN)Creating build information file$(NO_COLOR)\n"
    @make --no-print-directory deployment-create-build-info-file
</pre>

<p><a href="#build-and-push-the-docker-images">Build and push the <code>docker</code> images</a></p>

<pre>    @printf "$(GREEN)Building docker images$(NO_COLOR)\n"
    @make --no-print-directory docker-build
    @printf "$(GREEN)Pushing images to the registry$(NO_COLOR)\n"
    @make --no-print-directory docker-push
</pre>

<p><a href="#create-the-deployment-archive">Create the deployment archive</a></p>

<pre>    @printf "$(GREEN)Creating the deployment archive$(NO_COLOR)\n"
    @make deployment-create-tar
</pre>

<p><a href="#deployment-commands-on-the-vm">Run deployment commands on the VM</a></p>

<pre>    @printf "$(GREEN)Copying the deployment archive to the VM and run the deployment$(NO_COLOR)\n"
    @make --no-print-directory deployment-run-on-vm
</pre>

<p>Cleanup the deployment by removing the local deployment archive and enabling the default
environment  (<code>local</code>) for the <code>make</code> setup.</p>

<pre>    @printf "$(GREEN)Clearing deployment archive$(NO_COLOR)\n"
    @make --no-print-directory deployment-clear-tar
    @printf "$(GREEN)Switching to 'local' environment$(NO_COLOR)\n"
    @make --no-print-directory make-init
</pre>

<p><!-- generated -->
<a id='avoiding-code-drift'> </a>
<!-- /generated --></p>

<h3>Avoiding code drift</h3>

<p>The term "code drift" is derived from <a href="https://coder.com/blog/what-is-configuration-drift">configuration drift</a>,
which indicates the (subtle) differences in configuration between environments:</p>

<blockquote>
  <p>If you've ever heard an engineer lamenting (or sometimes arrogantly proclaiming)
  "well, it works on my machine" then you have been witness to configuration drift.</p>
</blockquote>

<p>In our case it refers to <strong>differences between our git repository and the code in the docker
images</strong> as well as <strong>changes between the decrypted and encrypted secret files</strong>. These problems
can occur, because we are currently
<strong>executing the deployment from our local machine</strong> and we might have made some
<strong>changes in the codebase</strong> when we build the docker images that are not yet reflected in git. The
build context sent to the <code>docker</code> daemon would then be different from the git repository resp.
the encrypted <code>.secret</code> files. This can lead to all sorts of hard-to-debug quirks and should
thus be avoided.</p>

<p>When we deploy later <strong>from the CI pipelines, those problems simply won't occur</strong>, because the whole
<strong>codebase will be identical with the git repository</strong> - but I really do NOT want to lose the
ability to deploy code from my local system (devs that went through Gitlab / Github downtimes
will understand...)</p>

<p>Corresponding checks are implemented via the <code>deployment-guard-uncommitted-changes</code> and
<code>deployment-guard-secret-changes</code> targets that exit with <code>exit 1</code> (a non-zero status code) which in
turn makes the <a href="#the-deploy-target"><code>deploy</code> target</a> stop/fail.</p>

<pre>IGNORE_SECRET_CHANGES?=

.PHONY: deployment-guard-secret-changes
deployment-guard-secret-changes: ## Check if there are any changes between the decrypted and encrypted secret files
    if ( ! make secret-diff || [ "$$(make secret-diff | grep ^@@)" != "" ] ) &amp;&amp; [ "$(IGNORE_SECRET_CHANGES)" == "" ] ; then \
        printf "Found changes in the secret files =&gt; $(RED)ABORTING$(NO_COLOR)\n\n"; \
        printf "Use with IGNORE_SECRET_CHANGES=true to ignore this warning\n\n"; \
        make secret-diff; \
        exit 1; \
    fi
    @echo "No changes in the secret files!"
</pre>

<p><a href="https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/#makefile-adjustments"><code>make secret-diff</code></a> is used
to check for differences between decrypted and encrypted secrets.</p>

<p><code>! make secret-diff</code> checks if the commands exits with a non-zero exit code. This happens for
instance, when the secrets have not been decrypted yet. The error is</p>

<pre>git-secret: abort: file not found. Consider using 'git secret reveal': &lt;missing-file&gt;
</pre>

<p>If the command doesn't fail, the changes are displayed in a <code>diff</code> format, e.g.</p>

<pre> --- /dev/fd/63
 +++ /var/www/app/.secrets/shared/passwords.txt
 @@ -1 +1,2 @@
  my_secret_password
 +1
 foo
</pre>

<p>We use <code>grep ^@@</code> to check the existence of a "line that starts with @@" to identify a change.
If no changes are found, the info <code>"No changes in the secret files!"</code> is printed. Otherwise, a
warning is shown. The check an be suppressed by passing <code>IGNORE_SECRET_CHANGES=true</code>.</p>

<pre>IGNORE_UNCOMMITTED_CHANGES?=

.PHONY: deployment-guard-uncommitted-changes
deployment-guard-uncommitted-changes: ## Check if there are any git changes and abort if so. The check can be ignore by passing `IGNORE_UNCOMMITTED_CHANGES=true`
    if [ "$$(git status -s)" != "" ] &amp;&amp; [ "$(IGNORE_UNCOMMITTED_CHANGES)" == "" ] ; then \
        printf "Found uncommitted changes in git =&gt; $(RED)ABORTING$(NO_COLOR)\n\n"; \
        printf "Use with IGNORE_UNCOMMITTED_CHANGES=true to ignore this warning\n\n"; \
        git status -s; \
        exit 1; \
    fi
    @echo "No uncommitted changes found!"
</pre>

<p>For <code>deployment-guard-uncommitted-changes</code> we use <code>git status -s</code> to check for any uncommitted
changes. If no changes are found the info <code>"No uncommitted changes found!"</code> is printed.
Otherwise, a warning is shown. The check an be suppressed by passing
<code>IGNORE_UNCOMMITTED_CHANGES=true</code>.</p>

<p><!-- generated -->
<a id='the-build-info-file'> </a>
<!-- /generated --></p>

<h3>The <code>build-info</code> file</h3>

<p>When testing the deployments I often needed to identify small bugs in the code. The more complex
the whole process gets, the more things can go wrong and the more "stuff needs to be checked".
One of them is the <a href="#avoiding-code-drift">code drift mentioned in the previous section</a>, btw.</p>

<p>To make my life a little easier, <strong>I added a file called <code>build-info</code> that contains information
about the build</strong> and will be stored in the docker images - allowing me to inspect the file
later, see also section <a href="#show-the-build-info">Show the <code>build-info</code></a>.</p>

<p>The file is created via <code>deployment-create-build-info-file</code> target</p>

<pre>.PHONY: deployment-create-build-info-file
deployment-create-build-info-file: ## Create a file containing version information about the codebase
    @echo "BUILD INFO" &gt; ".build/build-info"
    @echo "==========" &gt;&gt; ".build/build-info"
    @echo "User  :" $$(whoami) &gt;&gt; ".build/build-info"
    @echo "Date  :" $$(date --rfc-3339=seconds) &gt;&gt; ".build/build-info"
    @echo "Branch:" $$(git branch --show-current) &gt;&gt; ".build/build-info"
    @echo "" &gt;&gt; ".build/build-info"
    @echo "Commit" &gt;&gt; ".build/build-info"
    @echo "------" &gt;&gt; ".build/build-info"
    @git log -1 --no-color &gt;&gt; ".build/build-info"
</pre>

<p>The file is created on the host system under <code>.build/build-info</code> and then
<a href="#copy-codebase-and-build-info-file">copied to <code>./build-info</code> in the <code>Dockerfile</code> of the <code>php-base</code> image</a>.
To execute a shell command via <code>$(command)</code>,
<a href="https://stackoverflow.com/a/26564874/413531">the <code>$</code> has to be escaped with another <code>$</code></a>, to
not be interpreted by <code>make</code> as a variable. Example:</p>

<pre>some-target:
    $$(command)
</pre>

<p>FYI: I learned that
<a href="https://stackoverflow.com/a/54068252/413531"><code>make</code> converts all new lines in spaces when they are echo'd</a>
because I initially used</p>

<pre>@echo $$(git log -1 --no-color) &gt;&gt; ".build/build-info"
</pre>

<p>instead of</p>

<pre>@git log -1 --no-color &gt;&gt; ".build/build-info"
</pre>

<p>which would remove all new lines.</p>

<p>A final file <code>build-info</code> file looks like this:</p>

<pre>BUILD INFO
==========
User  : Pascal
Date  : 2022-05-22 17:10:21+02:00
Branch: part-9-deploy-docker-compose-php-gcp-poc

Commit
------
commit c47464536613874d192696d93d3c97b138c7a6be
Author: Pascal Landau &lt;pascal.landau@googlemail.com&gt;
Date:   Sun May 22 17:10:15 2022 +0200

    Testing the new `build-info` file

</pre>

<p><!-- generated -->
<a id='build-and-push-the-docker-images'> </a>
<!-- /generated --></p>

<h3>Build and push the <code>docker</code> images</h3>

<p><code>make</code> is initialized with <code>ENV=prod</code>, i.e. calling <code>make docker-build</code> will use
<a href="#env-based-docker-compose-config">the correct <code>docker compose</code> config</a> for <strong>building</strong> production
images. In addition, we have adjusted the <code>DOCKER_REGISTRY</code> to <code>gcr.io/pl-dofroscra-p</code> in the
<a href="#adding-gcp-values-to-make-variables-env">.make/variables.env file</a>, so that the images will
immediately be <a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/#pushing-images-to-the-registry">tagged correctly</a>
as</p>

<pre>gcr.io/pl-dofroscra-p/dofroscra/$service-prod

# e.g. for `php-base`

gcr.io/pl-dofroscra-p/dofroscra/php-base-prod
</pre>

<p><strong>Example:</strong></p>

<pre>$ make docker-build
ENV=prod TAG=latest DOCKER_REGISTRY=gcr.io/pl-dofroscra-p DOCKER_NAMESPACE=dofroscra APP_USER_NAME=application APP_GROUP_NAME=application docker compose -p dofroscra_prod --env-file ./.docker/.env -f ./.docker/docker-compose/docker-compose-php-base.yml build php-base
#1 [internal] load build definition from Dockerfile
# ...

$ docker image ls 
REPOSITORY                                          TAG     IMAGE ID       CREATED          SIZE
gcr.io/pl-dofroscra-p/dofroscra/php-fpm-prod        latest  2be3bec977de   24 seconds ago   147MB
gcr.io/pl-dofroscra-p/dofroscra/php-worker-prod     latest  6dbf14d1b329   25 seconds ago   181MB
gcr.io/pl-dofroscra-p/dofroscra/php-base-prod       latest  9164976a78a6   32 seconds ago   130MB
gcr.io/pl-dofroscra-p/dofroscra/application-prod    latest  377fdee0f12a   32 seconds ago   130MB
gcr.io/pl-dofroscra-p/dofroscra/nginx-prod          latest  42dd1608d126   24 seconds ago   23.5MB
</pre>

<p>Thanks to the image name, we can also immediately <strong>push</strong> the images to the remote registry via
<code>make docker-push</code>. Note, that we see a lot of <code>Layer already exists</code> infos in the console
output for the <code>php-fpm</code> and <code>php-worker</code> images. This is due to the fact that we use
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#php-images">a common <code>php-base</code> base image</a>
for <code>application</code>, <code>php-fpm</code> and <code>php-worker</code>, i.e. <strong>those images have a lot of layers in
common</strong> and only the layers of <code>application</code> are pushed. <code>docker</code> uses the
<a href="https://stackoverflow.com/questions/36339514/how-docker-calculates-the-hash-of-each-layer-is-it-deterministic">layer hash</a>
to identify which layers already exist.</p>

<pre>$ make docker-push
ENV=prod TAG=latest DOCKER_REGISTRY=gcr.io/pl-dofroscra-p DOCKER_NAMESPACE=dofroscra APP_USER_NAME=application APP_GROUP_NAME=application docker compose -p dofroscra_prod --env-file ./.docker/.env -f ./.docker/docker-compose/docker-compose.local.ci.prod.yml -f ./.docker/docker-compose/docker-compose.local.prod.yml -f ./.docker/docker-compose/docker-compose.prod.yml push
mysql Skipped
redis Skipped
Pushing application: c8f4416c4383 Preparing
#...
Pushing application: 6bbfa8829d07 Pushing [==================================================&gt;]  3.584kB
#...
Pushing php-worker: 6bbfa8829d07 Layer already exists
#...
Pushing php-fpm: 6bbfa8829d07 Layer already exists
</pre>

<p><!-- generated -->
<a id='create-the-deployment-archive'> </a>
<!-- /generated --></p>

<h3>Create the deployment archive</h3>

<p>As described in the <a href="#deployment-workflow">introduction of the Deployment workflow</a>, we need to
<strong>make our <code>make</code> and <code>docker</code> setup somehow available on the VM</strong>. We will solve this issue by
<strong>creating a <code>tar</code> archive with all necessary files locally</strong> and
<a href="#deployment-commands-on-the-vm">transfer it to the VM</a>.</p>

<p>The archive is created via the <code>deployment-create-tar</code> target</p>

<pre>.PHONY: deployment-create-tar
deployment-create-tar:
    # create the build directory
    rm -rf .build/deployment
    mkdir -p .build/deployment
    # copy the necessary files
    mkdir -p .build/deployment/.docker/docker-compose/
    cp -r .docker/docker-compose/ .build/deployment/.docker/
    cp -r .make .build/deployment/
    cp Makefile .build/deployment/
    cp .infrastructure/scripts/deploy.sh .build/deployment/
    # make sure we don't have any .env files in the build directory (don't wanna leak any secrets) ...
    find .build/deployment -name '.env' -delete
    # ... apart from the .env file we need to start docker
    cp .secrets/prod/docker.env .build/deployment/.docker/.env
    # create the archive
    tar -czvf .build/deployment.tar.gz -C .build/deployment/ ./
</pre>

<p>The recipe uses the <code>.build/deployment</code> directory as a temporary location to store all necessary
files, i.e.</p>

<ul>
<li>the <code>docker compose</code> config files in <code>.docker/docker-compose/</code></li>
<li>the <code>Makefile</code> and the <code>.make</code> directory in the root of the codebase for the <code>make</code> setup</li>
<li>the <code>.infrastructure/scripts/deploy.sh</code> script to run the deployment</li>
</ul>

<p>In addition, we copy <a href="#a-env-file-for-prod">the <code>.secrets/prod/docker.env</code> file</a> to use it as the
<code>.env</code> file for <code>docker compose</code>. <strong>Caution</strong>: This only works, because we have
<a href="#avoiding-code-drift">verified previously that there are no changes between the decrypted and encrypted .secret files</a>
(which also means that <code>.secrets/prod/docker.env</code> is already decrypted).</p>

<p>Once all files are copied, the whole directory is added to the <code>.build/deployment.tar.gz</code>
archive via</p>

<pre>tar -czvf .build/deployment.tar.gz -C .build/deployment/ ./
</pre>

<p>The <code>-C .build/deployment/</code> option makes sure that
<a href="https://serverfault.com/a/330133">the directory structure is retained when extracting the archive</a>.
For the remaining options take a look at
<a href="https://www.cyberciti.biz/faq/how-to-create-tar-gz-file-in-linux-using-command-line/">How to create tar.gz file in Linux using command line</a>.</p>

<p><!-- generated -->
<a id='deployment-commands-on-the-vm'> </a>
<!-- /generated --></p>

<hr/><p><b>Due to technical constraints, this article is capped at 30000 characters. Read the full content at <a href='https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/'>Use docker compose for production deployments of a PHP App on GCP [Tutorial Part 9]</a></b></p>
]]></description>
                <pubDate>Wed, 29 Jun 2022 06:00:00 +0000</pubDate>
                <link>https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/?utm_source=blog&amp;utm_medium=rss&amp;utm_campaign=feed-codeproject-com</link>
                <guid isPermaLink="true">https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/</guid>
            </item>
                    <item>
                <title>A primer on GCP Compute Instance VMs for dockerized Apps [Tutorial Part 8]</title>
                <description><![CDATA[<p>This article appeared first on <a href='https://www.pascallandau.com/'>https://www.pascallandau.com/</a> at <a href='https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/'>A primer on GCP Compute Instance VMs for dockerized Apps [Tutorial Part 8]</a></p>
<hr />

<p>In the eighth part of this tutorial series on developing PHP on Docker we will <strong>take a look on 
the Google Cloud Platform (GCP)</strong> and <strong>create a Compute Instance VM</strong> to <strong>run dockerized 
applications</strong>. This includes:</p>

<ul>
<li>creating VMs</li>
<li>using a container registry</li>
<li>using a secret manager</li>
</ul>

<div class="youtube">
<iframe width="560" height="315" src="https://www.youtube.com/embed/RScVUaNHNxs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<div class="youtube">
<iframe width="560" height="315" src="https://www.youtube.com/embed/uPx9AZPOMrA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<p><strong>All code samples are publicly available</strong> in my
<a href="https://github.com/paslandau/docker-php-tutorial/">Docker PHP Tutorial repository on Github</a>.<br />
You find the branch with the final result of this tutorial at
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-8-gcp-compute-instance-vm-docker">part-8-gcp-compute-instance-vm-docker</a>.</p>

<p><strong>All published parts of the Docker PHP Tutorial</strong> are collected under a dedicated page at
<a href="https://www.pascallandau.com/docker-php-tutorial/">Docker PHP Tutorial</a>. The previous part was
<a href="https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/">Create a CI pipeline for dockerized PHP Apps</a>.
and the following one is
<a href="https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc">Deploy dockerized PHP Apps to production on GCP via docker compose</a>.</p>

<p>If you want to follow along, please subscribe to the <a href="https://www.pascallandau.com/feed.xml">RSS feed</a>
or <a href="#newsletter">via email</a> to get <strong>automatic notifications</strong> when the next part comes out :)</p>

<p><!-- generated -->
<a id='table-of-contents'> </a>
<!-- /generated --></p>

<h2>Table of contents</h2>

<!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#set-up-a-gcp-project">Set up a GCP project</a></li>
<li><a href="#create-a-service-account">Create a service account</a>

<ul>
<li><a href="#create-service-account-key-file">Create service account key file</a></li>
<li><a href="#configure-iam-permissions">Configure IAM permissions</a></li>
</ul></li>
<li><a href="#set-up-the-gcloud-cli-tool">Set up the <code>gcloud</code> CLI tool</a></li>
<li><a href="#set-up-the-container-registry">Set up the Container Registry</a>

<ul>
<li><a href="#authenticate-docker">Authenticate docker</a></li>
<li><a href="#pushing-images-to-the-registry">Pushing images to the registry</a></li>
<li><a href="#images-are-stored-in-google-cloud-storage-buckets">Images are stored in Google Cloud Storage buckets</a></li>
<li><a href="#pulling-images-from-the-registry">Pulling images from the registry</a></li>
</ul></li>
<li><a href="#set-up-the-secret-manager">Set up the Secret Manager</a>

<ul>
<li><a href="#create-a-secret-via-the-ui">Create a secret via the UI</a></li>
<li><a href="#view-a-secret-via-the-ui">View a secret via the UI</a></li>
<li><a href="#retrieve-a-secret-via-the-gcloud-cli">Retrieve a secret via the <code>gcloud</code> cli</a></li>
<li><a href="#add-the-secret-gpg-key-and-password">Add the secret <code>gpg</code> key and password</a></li>
</ul></li>
<li><a href="#compute-instances-the-gcp-vms">Compute Instances: The GCP VMs </a>

<ul>
<li><a href="#create-a-vm">Create a VM</a>

<ul>
<li><a href="#general-vm-settings">General VM settings</a></li>
<li><a href="#firewall-and-networks-tags">Firewall and networks tags</a></li>
<li><a href="#the-role-of-the-service-account">The role of the service account</a></li>
<li><a href="#adding-a-public-ssh-key">Adding a public SSH key</a></li>
<li><a href="#define-availability-policies">Define Availability Policies</a></li>
<li><a href="#the-actual-vm-creation">The actual VM creation</a></li>
</ul></li>
<li><a href="#log-into-a-vm">Log into a VM</a>

<ul>
<li><a href="#login-via-ssh-from-the-gcp-ui">Login via SSH from the GCP UI</a></li>
<li><a href="#login-via-ssh-with-your-own-key-from-your-host-machine">Login via SSH with your own key from your host machine</a></li>
<li><a href="#login-using-the-identity-aware-proxy-iap-concept">Login using the Identity-Aware Proxy (IAP) concept</a>

<ul>
<li><a href="#additional-notes-on-iap">Additional notes on IAP</a></li>
</ul></li>
<li><a href="#get-root-permissions">Get <code>root</code> permissions</a></li>
</ul></li>
<li><a href="#ssh-and-scp-commands"><code>ssh</code> and <code>scp</code> commands</a>

<ul>
<li><a href="#gcloud-ssh-command"><code>gcloud ssh --command=""</code></a></li>
<li><a href="#gcloud-scp"><code>gcloud scp</code></a></li>
</ul></li>
</ul></li>
<li><a href="#provision-the-vm">Provision the VM</a>

<ul>
<li><a href="#get-the-secret-gpg-key-and-password-from-the-secret-manager">Get the secret <code>gpg</code> key and password from the Secret Manager</a></li>
<li><a href="#installing-docker-and-docker-compose">Installing <code>docker</code> and <code>docker compose</code></a></li>
<li><a href="#authenticate-docker-via-gcloud">Authenticate docker via <code>gcloud</code></a></li>
<li><a href="#pulling-the-nginx-image">Pulling the <code>nginx</code> image</a></li>
<li><a href="#start-the-nginx-container">Start the <code>nginx</code> container</a></li>
</ul></li>
<li><a href="#automate-via-gcloud-commands">Automate via <code>gcloud</code> commands</a>

<ul>
<li><a href="#preconditions-project-and-owner-service-account">Preconditions: Project and <code>Owner</code> service account</a></li>
<li><a href="#configure-gcloud-to-use-the-master-service-account">Configure <code>gcloud</code> to use the master service account</a></li>
<li><a href="#enable-apis">Enable APIs</a></li>
<li><a href="#create-and-configure-a-deployment-service-account">Create and configure a "deployment" service account</a></li>
<li><a href="#create-secrets">Create secrets</a></li>
<li><a href="#create-firewall-rule-for-http-traffic">Create firewall rule for HTTP traffic</a></li>
<li><a href="#create-a-compute-instance-vm">Create a Compute Instance VM</a></li>
<li><a href="#provisioning">Provisioning</a></li>
<li><a href="#deployment">Deployment</a></li>
</ul></li>
<li><a href="#putting-it-all-together">Putting it all together </a></li>
<li><a href="#cleanup">Cleanup</a></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ul>

<!-- /toc -->

<p><!-- generated -->
<a id='introduction'> </a>
<!-- /generated --></p>

<h2>Introduction</h2>

<p>In the next tutorial we will
<a href="https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc">deploy our dockerized PHP Apps to "production" via docker compose</a>
and will create this "production" environment on <strong>GCP (Google Cloud Platform)</strong>. 
This tutorial serves as a primer on GCP to build up some fundamental knowledge, because we will 
use the platform to provide all the <strong>infrastructure required to run our dockerized PHP 
application</strong>.</p>

<p>In the process, we'll learn about <a href="#set-up-a-gcp-project">GCP projects</a> as our own "space" 
in GCP and <a href="#create-a-service-account">service accounts</a> as a way to communicate 
programmatically. We'll start by doing everything manually via the UI, but will also 
<a href="#automate-via-gcloud-commands">explain how to do it programmatically via the <code>gcloud</code> cli</a> and 
end with a <a href="#putting-it-all-together">fully automated script</a>.</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-services.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-services.PNG" alt="GCP Services" /></a></p>

<p>The following video shows the overall flow</p>

<video controls>
  <source src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-run-docker-images.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>

<p>The API keys (see <a href="#create-service-account-key-file">service account key files</a>) that I use are 
<strong>not</strong> in the repository, because I would be billed for any usage. I.e. <strong>you must create you own 
project and keys</strong> to follow along.</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <strong>Caution</strong>
  </div>
  <div class="panel-body bg-danger">
    Following the steps outlined in this tutorial <strong>will incur costs</strong>, because we will 
    create "real" infrastructure. It won't be much (couple of cents), and it will very likely be 
    covered by the free 300$ grant that you get when trying out GCP (or the general unlimited 
    <a href="https://cloud.google.com/free/docs/gcp-free-tier">GCP Free Tier</a>
    ).<br> 
    <br>
    But you should still know about that upfront and <strong>make sure to shut everything down / 
    delete everything</strong> in case you're trying it out yourself. The "safest" way to do so is
    <a href="#cleanup">Shutting down (deleting) the whole project</a>
  </div>
</div>

<p><!-- generated -->
<a id='set-up-a-gcp-project'> </a>
<!-- /generated --></p>

<h2>Set up a GCP project</h2>

<p>On GCP, resources are organized under so-called 
<a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects">projects</a>. We can 
create a project via the <a href="https://console.cloud.google.com/projectcreate">Create Project UI</a>:</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-new-project.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-new-project.PNG" alt="Create a new GCP project" /></a></p>

<p>The <strong>project ID</strong> must be a globally unique string, and I have chosen <code>pl-dofroscra-p</code> for this 
tutorial (<code>pl</code> => Pascal Landau; <code>dofroscra</code> => Docker From Scratch; <code>p</code> => production).</p>

<p><!-- generated -->
<a id='create-a-service-account'> </a>
<!-- /generated --></p>

<h2>Create a service account</h2>

<p>As a next step, we need a <a href="https://cloud.google.com/iam/docs/service-accounts">service account</a>
that we can <strong>use to make API requests</strong>, because we don't want to use our "personal GCP account". 
Service accounts are created via the 
<a href="https://console.cloud.google.com/iam-admin/serviceaccounts/create">IAM &amp; Admin > Service Accounts UI</a>:</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-new-service-account.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-new-service-account.PNG" alt="Create a new GCP service account" /></a></p>

<p><!-- generated -->
<a id='create-service-account-key-file'> </a>
<!-- /generated --></p>

<h3>Create service account key file</h3>

<p>In order to <strong>use the account programmatically</strong>, we also need to 
<a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating">create a key file</a>
by choosing the "Manage Keys" option of the corresponding service account.</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-service-account-key-file.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-service-account-key-file.PNG" alt="Create a new key file for a GCP service account UI" /></a></p>

<p>This will open up a UI at</p>

<pre>https://console.cloud.google.com/iam-admin/serviceaccounts/details/$serviceAccountId/keys
</pre>

<p>where <code>$serviceAccountId</code> is the numeric id of the service account, e.g. <code>109548647107864470967</code>.
To create a key:</p>

<ul>
<li>click <code>"ADD KEY"</code> and select <code>"Create new key"</code> from the drop down menu

<ul>
<li>This will bring up a modal window to choose the key type.</li>
</ul></li>
<li>select the recommended JSON type and click <code>"Create"</code>.

<ul>
<li>GCP will then <strong>generate a new key pair</strong>, store the public key and offer the private key file as 
download.</li>
</ul></li>
<li>download the file and make sure to treat it like any other private key (ssh, gpg, ...) 
i.e. <strong>never share it publicly</strong>!</li>
</ul>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-service-account-key-file.gif"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-create-service-account-key-file.gif" alt="Create a new key file for a GCP service account" /></a></p>

<p>We will <strong>store this file in the root of the codebase</strong> at <code>gcp-service-account-key.json</code> and add it 
to the <code>.gitignore</code> file.</p>

<p>Each service account has also a <strong>unique email address</strong> that consists of its (non-numeric) <code>id</code> 
and the <code>project id</code>. You can also find it directly in the key file:</p>

<pre>$ grep "email" ./gcp-service-account-key.json
  "client_email": "docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com",
</pre>

<p>This email address is usually used to reference the service account, e.g. when assigning IAM 
permissions.</p>

<p><!-- generated -->
<a id='configure-iam-permissions'> </a>
<!-- /generated --></p>

<h3>Configure IAM permissions</h3>

<p><strong>IAM</strong> stands for <a href="https://cloud.google.com/iam/docs#docs">Identity and Access Management (IAM)</a> 
and is used for <strong>managing permissions on GCP</strong>. The 
<a href="https://cloud.google.com/iam/docs/understanding-roles">two core concepts are "permissions" and "roles"</a>:</p>

<ul>
<li><strong>permissions</strong> are fine-grained for particular actions, e.g. <code>storage.buckets.create</code> to "Create 
Cloud Storage buckets"</li>
<li><strong>roles</strong> combine a selection of permissions, e.g. the <code>Cloud Storage Admin</code> role has 
permissions like

<ul>
<li><code>storage.buckets.create</code></li>
<li><code>storage.buckets.get</code></li>
<li>etc.</li>
</ul></li>
<li>roles are assigned to <strong>users</strong> (or service accounts)</li>
</ul>

<p>You can find a full overview of all permissions in the 
<a href="https://cloud.google.com/iam/docs/permissions-reference">Permissions Reference</a> and all roles 
under 
<a href="https://cloud.google.com/iam/docs/understanding-roles#predefined">Understanding roles > Predefined roles</a>.</p>

<p>For this tutorial, we'll assign the following roles to the service account "user"
<code>docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com</code>:</p>

<ul>
<li><code>Storage Admin</code>

<ul>
<li>required to <a href="#pushing-images-to-the-registry">create the GCP bucket for the registry</a> and to 
<a href="#pulling-images-from-the-registry">pull the images on the VM</a></li>
</ul></li>
<li><code>Secret Manager Admin</code>

<ul>
<li>required to <a href="#get-the-secret-gpg-key-and-password-from-the-secret-manager">retrieve secrets from the Secret Manager</a></li>
</ul></li>
<li><code>Compute Admin</code>, <code>Service Account User</code> and <code>IAP-secured Tunnel User</code>

<ul>
<li>are necessary for <a href="#additional-notes-on-iap">logging into a VM via IAP</a>.</li>
</ul></li>
</ul>

<p>Roles can be assigned through the
<a href="https://console.cloud.google.com/iam-admin/iam">Cloud Console IAM UI</a> by editing the
corresponding user.</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-iam-permissions.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-iam-permissions.PNG" alt="Managing IAM permissions" /></a></p>

<p><strong>Caution:</strong> It might take some time (usually a couple of seconds) until changes in IAM
permissions take effect.</p>

<p><!-- generated -->
<a id='set-up-the-gcloud-cli-tool'> </a>
<!-- /generated --></p>

<h2>Set up the <code>gcloud</code> CLI tool</h2>

<p>The <a href="https://cloud.google.com/sdk/gcloud">CLI tool for GCP is called <code>gcloud</code></a> and is
<a href="https://cloud.google.com/sdk/docs/install">available for all operating systems</a>.</p>

<p>In this tutorial we are using version <code>380.0.0</code> <strong>installed natively on Windows</strong> via the
<a href="https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe">GoogleCloudSDKInstaller.exe</a>
using the "Bundled Python" option.</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcloud-installation-options.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcloud-installation-options.PNG" alt="Install <code>gcloud</code> on Windows" /></a></p>

<p>FYI: As described under
<a href="https://cloud.google.com/sdk/docs/uninstall-cloud-sdk">Uninstalling the Google Cloud CLI</a>
you can find the installation and config directories via</p>

<pre># installation directory
$ gcloud info --format='value(installation.sdk_root)'
C:\Users\Pascal\AppData\Local\Google\Cloud SDK\google-cloud-sdk

# config directory
$ gcloud info --format='value(config.paths.global_config_dir)'
C:\Users\Pascal\AppData\Roaming\gcloud
</pre>

<p>I will <em>not</em> use my personal Google account to run <code>gcloud</code> commands, thus I'm <em>not</em> using the 
"usual" initialization process
<a href="https://cloud.google.com/sdk/docs/initializing">by running <code>gcloud init</code></a>. Instead, I will use
the <a href="#create-a-service-account">service account that we created previously</a> and activate it as 
described under
<a href="https://cloud.google.com/sdk/gcloud/reference/auth/activate-service-account">gcloud auth activate-service-account</a>
via</p>

<pre>gcloud auth activate-service-account docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com --key-file=./gcp-service-account-key.json --project=pl-dofroscra-p
</pre>

<p>Output</p>

<pre>$ gcloud auth activate-service-account docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com --key-file=./gcp-service-account-key.json --project=pl-dofroscra-p
Activated service account credentials for: [docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com]
</pre>

<p>FYI: Because we are using a <code>json</code> key file that includes the service account ID, we can also 
omit the id in the command, i.e.</p>

<pre>$ gcloud auth activate-service-account --key-file=./gcp-service-account-key.json --project=pl-dofroscra-p
Activated service account credentials for: [docker-php-tutorial-deployment@pl-dofroscra-p.iam.gserviceaccount.com]
</pre>

<p><!-- generated -->
<a id='set-up-the-container-registry'> </a>
<!-- /generated --></p>

<h2>Set up the Container Registry</h2>

<p><a href="https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/">We will use <code>docker compose</code> to run our PHP application in the next tutorial part</a>
and need to <strong>make our docker images available</strong> in a 
<a href="https://www.redhat.com/en/topics/cloud-native-apps/what-is-a-container-registry">container registry</a>.
Luckily, <a href="https://cloud.google.com/container-registry">GCP offers a Container Registry product</a> 
that gives us a <strong>ready-to-use private registry as part of a GCP project</strong>. Before we can use it, 
the corresponding 
<a href="https://console.cloud.google.com/marketplace/product/google/containerregistry.googleapis.com">Google Container Registry API must be enabled</a>:</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-enable-container-registry-api.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-enable-container-registry-api.PNG" alt="Enable the GCP Container Registry API" /></a></p>

<p>You find the <strong>Container Registry</strong> in the Cloud Console UI under 
<a href="https://console.cloud.google.com/gcr">Container Registry</a>.</p>

<p><!-- generated -->
<a id='authenticate-docker'> </a>
<!-- /generated --></p>

<h3>Authenticate docker</h3>

<p>Since the Container Registry is private, we <strong>need to authenticate before we can push our 
docker images</strong>. The available authentication methods are described in the
<a href="https://cloud.google.com/container-registry/docs/advanced-authentication">GCP docu "Container Registry Authentication methods"</a>.
For pushing images from our local host system, we will use <strong>the service account key file</strong> that we 
<a href="#create-service-account-key-file">created previously</a> and run the command shown in the
<a href="https://cloud.google.com/container-registry/docs/advanced-authentication#json-key">"JSON key file" section</a>
of the the docu.</p>

<pre>key=./gcp-service-account-key.json
cat "$key" | docker login -u _json_key --password-stdin https://gcr.io
</pre>

<p>A successful authentication looks as follows:</p>

<pre>$ cat "$key" | docker login -u _json_key --password-stdin https://gcr.io
Login Succeeded

Logging in with your password grants your terminal complete access to your account.
For better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/
</pre>

<p>So what exactly "happens" when we run this command? According to the 
<a href="https://docs.docker.com/engine/reference/commandline/login/"><code>docker login</code>documentation</a></p>

<blockquote>
  <p>When you log in, the command stores credentials in <code>$HOME/.docker/config.json</code> 
  on Linux or <code>%USERPROFILE%/.docker/config.json</code> on Windows
  [...]</p>
  
  <p>The Docker Engine can keep user credentials in an external credentials store, 
  such as the native keychain of the operating system.
  [...]</p>
  
  <p>You need to specify the credentials store in 
  <code>$HOME/.docker/config.json</code> to tell the docker engine to use it.
  [...]</p>
  
  <p>By default, Docker looks for the native binary on each of the platforms, 
  i.e. “osxkeychain” on macOS, “wincred” on windows, and “pass” on Linux.</p>
</blockquote>

<p>In other words: I <strong>won't be able to see the content of the service account key file in "plain 
text"</strong> anywhere but docker will utilize the OS specific tools to store them securely. After I ran 
the <code>docker login</code> command on Windows, I found the following content in <code>~/.docker/config.json</code>:</p>

<pre>$ cat ~/.docker/config.json
{
        "auths": {
                "gcr.io": {}
        },
        "credsStore": "desktop"
}
</pre>

<p>FYI: <code>"desktop"</code> seems to be a 
<a href="https://forums.docker.com/t/docker-windows-desktop-credentials-location/107251">wrapper for the Wincred executable</a>.</p>

<p><!-- generated -->
<a id='pushing-images-to-the-registry'> </a>
<!-- /generated --></p>

<h3>Pushing images to the registry</h3>

<p>For this tutorial, we will create a super simple <code>nginx</code> alpine image that provides a "Hello 
world" <code>hello.html</code> file via</p>

<pre>docker build -t my-nginx -f - . &lt;&lt;EOF
FROM nginx:1.21.5-alpine

RUN echo "Hello world" &gt;&gt; /usr/share/nginx/html/hello.html

EOF
</pre>

<p>The name of the image is <code>my-nginx</code></p>

<pre>$ docker image ls | grep my-nginx
my-nginx         latest             42dd1608d126   50 seconds ago    23.5MB
</pre>

<p>In order to 
<a href="https://docs.docker.com/engine/reference/commandline/push/">push an image to a registry</a>,
<strong>the image name must be prefixed with the corresponding registry</strong>. This was quite confusing to 
me, because I would have expected to be able to run something like this:</p>

<pre>$ docker push my-nginx --registry=gcr.io

unknown flag: --registry
See 'docker push --help'.
</pre>

<p>But nope, there is no such <code>--registry</code> option. Even worse: <strong>Omitting it would cause a push to 
<code>docker.io</code></strong>, the "default" registry:</p>

<pre>$ docker push my-nginx
Using default tag: latest
The push refers to repository [docker.io/my-nginx]
</pre>

<p>According to 
<a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling">the GCP docs on Pushing and pulling images</a>, 
the following steps are necessary to push an image to a GCP registry:</p>

<blockquote>
  <ul>
  <li><strong>Tag</strong> the image with its target path in Container Registry, including the gcr.io registry 
  host and the project ID my-project</li>
  <li><strong>Push</strong> the image to the registry</li>
  </ul>
</blockquote>

<p>In our case <strong>the target path to our Container Registry</strong> is</p>

<pre>gcr.io/pl-dofroscra-p
</pre>

<p>because <code>pl-dofroscra-p</code> is the <a href="#set-up-a-gcp-project">id of the GCP project we created previously</a>.</p>

<p>The <strong>full image name</strong> becomes</p>

<pre>gcr.io/pl-dofroscra-p/my-nginx
</pre>

<p>To push the <code>my-nginx</code> image, we must first <strong>"add another name"</strong> to it via 
<a href="https://docs.docker.com/engine/reference/commandline/tag/"><code>docker tag</code></a></p>

<pre>$ docker tag my-nginx gcr.io/pl-dofroscra-p/my-nginx

$ docker image ls
REPOSITORY                       TAG                IMAGE ID       CREATED          SIZE
my-nginx                         latest             ba7a2c5faf0d   15 minutes ago   23.5MB
gcr.io/pl-dofroscra-p/my-nginx   latest             ba7a2c5faf0d   15 minutes ago   23.5MB
</pre>

<p>and <strong>push that name afterwards</strong></p>

<pre>$ docker push gcr.io/pl-dofroscra-p/my-nginx
Using default tag: latest
The push refers to repository [gcr.io/pl-dofroscra-p/my-nginx]
134174afa9ad: Preparing
cb7b4430c52d: Preparing
419df8b60032: Preparing
0e835d02c1b5: Preparing
5ee3266a70bd: Preparing
3f87f0a06073: Preparing
1c9c1e42aafa: Preparing
8d3ac3489996: Preparing
8d3ac3489996: Waiting
3f87f0a06073: Waiting
1c9c1e42aafa: Waiting
cb7b4430c52d: Pushed
134174afa9ad: Pushed
419df8b60032: Pushed
5ee3266a70bd: Pushed
0e835d02c1b5: Pushed
8d3ac3489996: Layer already exists
3f87f0a06073: Pushed
1c9c1e42aafa: Pushed
latest: digest: sha256:0740591fb686227d8cdf4e42b784f634cbaf9f5caa6ee478e3bcc24aeef75d7f size: 1982
</pre>

<p>You can then find the image in the 
<a href="https://console.cloud.google.com/gcr">UI of the Container Registry</a>:</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-container-registry-image-example.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-container-registry-image-example.PNG" alt="Example of a pushed image in the Container Registry" /></a></p>

<p>Don't worry: We won't have to do the tagging every time before a push, because we will 
<a href="https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/#adding-gcp-values-to-make-variables-env">set up <code>make</code> to use the correct name automatically</a>
when building the images in the <a href="https://www.pascallandau.com/blog/deploy-docker-compose-php-gcp-poc/">next part</a>.</p>

<p><!-- generated -->
<a id='images-are-stored-in-google-cloud-storage-buckets'> </a>
<!-- /generated --></p>

<h3>Images are stored in Google Cloud Storage buckets</h3>

<p>We <a href="#configure-iam-permissions">assigned the <code>Storage Admin</code> role to the service account previously</a>
that contains the <code>storage.buckets.create</code> permission. If we wouldn't have done that, the 
following error would have occurred:</p>

<pre>denied: Token exchange failed for project 'pl-dofroscra-p'. Caller does not have permission 'storage.buckets.create'. To configure permissions, follow instructions at: https://cloud.google.com/container-registry/docs/access-control
</pre>

<p>The Container Registry tries to <strong>store the docker images in a Google Cloud Storage bucket</strong> that 
is created on the fly when the <strong>very first image is pushed</strong>, see 
<a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling#add-registry">the GCP docs on "Adding a registry"</a>:</p>

<blockquote>
  <p>The first image push to a hostname triggers creation of the registry in a project 
  and the corresponding Cloud Storage storage bucket. 
  This initial push requires project-wide permissions to create storage buckets.</p>
</blockquote>

<p>You can find the bucket, that in my case is named <code>artifacts.pl-dofroscra-p.appspot.com</code>
in the <a href="https://console.cloud.google.com/storage">Cloud Storage UI</a>:</p>

<p><a href="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-cloud-storage-registry-images.PNG"><img src="https://www.pascallandau.com/img/gcp-compute-instance-vm-docker/gcp-cloud-storage-registry-images.PNG" alt="GCP Container Registry image location on Cloud Storage" /></a></p>

<p><strong>CAUTION</strong>: Make sure to <strong>delete this bucket once you are done with the tutorial</strong> - otherwise 
<a href="https://cloud.google.com/storage/pricing">storage costs</a> will incur.</p>

<p><!-- generated -->
<a id='pulling-images-from-the-registry'> </a>
<!-- /generated --></p>

<hr/><p><b>Due to technical constraints, this article is capped at 30000 characters. Read the full content at <a href='https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/'>A primer on GCP Compute Instance VMs for dockerized Apps [Tutorial Part 8]</a></b></p>
]]></description>
                <pubDate>Mon, 20 Jun 2022 06:00:00 +0000</pubDate>
                <link>https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/?utm_source=blog&amp;utm_medium=rss&amp;utm_campaign=feed-codeproject-com</link>
                <guid isPermaLink="true">https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/</guid>
            </item>
                    <item>
                <title>CI Pipelines for dockerized PHP Apps with Github &amp; Gitlab [Tutorial Part 7]</title>
                <description><![CDATA[<p>This article appeared first on <a href='https://www.pascallandau.com/'>https://www.pascallandau.com/</a> at <a href='https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/'>CI Pipelines for dockerized PHP Apps with Github & Gitlab [Tutorial Part 7]</a></p>
<hr />

<p>In the seventh part of this tutorial series on developing PHP on Docker we will <strong>setup a CI
(Continuous Integration) pipeline to run code quality tools and tests on Github Actions and Gitlab
Pipelines</strong>.</p>

<div class="youtube center-div">
<iframe width="560" height="315" src="https://www.youtube.com/embed/VsNvvt0CMm8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<p><strong>All code samples are publicly available</strong> in my
<a href="https://github.com/paslandau/docker-php-tutorial/">Docker PHP Tutorial repository on Github</a>.<br />
You find the branch for this tutorial at
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-7-ci-pipeline-docker-php-gitlab-github">part-7-ci-pipeline-docker-php-gitlab-github</a>.</p>

<p><strong>All published parts of the Docker PHP Tutorial</strong> are collected under a dedicated page at
<a href="https://www.pascallandau.com/docker-php-tutorial/">Docker PHP Tutorial</a>. The previous part was
<a href="https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/">Use git-secret to encrypt secrets in the repository</a>
and the following one is
<a href="https://www.pascallandau.com/blog/gcp-compute-instance-vm-docker/">A primer on GCP Compute Instance VMs for dockerized Apps</a>.</p>

<p>If you want to follow along, please subscribe to the <a href="https://www.pascallandau.com/feed.xml">RSS feed</a>
or <a href="#newsletter">via email</a>
to get <strong>automatic notifications</strong> when the next part comes out :)</p>

<p><!-- generated -->
<a id='table-of-contents'> </a>
<!-- /generated --></p>

<h2>Table of contents</h2>

<!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a>

<ul>
<li><a href="#recommended-reading">Recommended reading</a></li>
<li><a href="#approach">Approach</a></li>
<li><a href="#try-it-yourself">Try it yourself</a></li>
</ul></li>
<li><a href="#ci-setup">CI setup</a>

<ul>
<li><a href="#general-ci-notes">General CI notes</a>

<ul>
<li><a href="#initialize-make-for-ci">Initialize <code>make</code> for CI</a></li>
<li><a href="#wait-for-service-sh">wait-for-service.sh</a></li>
</ul></li>
<li><a href="#setup-for-a-local-ci-run">Setup for a "local" CI run</a>

<ul>
<li><a href="#run-details">Run details</a></li>
<li><a href="#execution-example">Execution example</a></li>
</ul></li>
<li><a href="#setup-for-github-actions">Setup for Github Actions</a>

<ul>
<li><a href="#the-workflow-file">The Workflow file</a></li>
</ul></li>
<li><a href="#setup-for-gitlab-pipelines">Setup for Gitlab Pipelines</a>

<ul>
<li><a href="#the-gitlab-ci-yml-pipeline-file">The <code>.gitlab-ci.yml</code> pipeline file</a></li>
</ul></li>
<li><a href="#performance">Performance</a>

<ul>
<li><a href="#the-caching-problem-on-ci">The caching problem on CI</a></li>
</ul></li>
</ul></li>
<li><a href="#docker-changes">Docker changes</a>

<ul>
<li><a href="#compose-file-updates">Compose file updates</a>

<ul>
<li><a href="#docker-compose-local-yml">docker-compose.local.yml</a></li>
<li><a href="#docker-compose-ci-yml">docker-compose.ci.yml</a></li>
<li><a href="#adding-a-health-check-for-mysql">Adding a health check for <code>mysql</code></a></li>
</ul></li>
<li><a href="#build-target-ci">Build target: <code>ci</code></a>

<ul>
<li><a href="#build-stage-ci-in-the-php-base-image">Build stage <code>ci</code> in the <code>php-base</code> image</a>

<ul>
<li><a href="#use-the-whole-codebase-as-build-context">Use the whole codebase as build context</a></li>
<li><a href="#build-the-dependencies">Build the dependencies</a></li>
<li><a href="#create-the-final-image">Create the final image</a></li>
</ul></li>
<li><a href="#build-stage-ci-in-the-application-image">Build stage <code>ci</code> in the <code>application</code> image</a></li>
</ul></li>
<li><a href="#dockerignore">.dockerignore</a></li>
</ul></li>
<li><a href="#makefile-changes">Makefile changes</a>

<ul>
<li><a href="#initialize-the-shared-variables">Initialize the shared variables</a></li>
<li><a href="#env-based-docker-compose-config">ENV based docker compose config</a></li>
</ul></li>
<li><a href="#codebase-changes">Codebase changes</a>

<ul>
<li><a href="#add-a-test-for-encrypted-files">Add a test for encrypted files</a></li>
<li><a href="#add-a-password-protected-secret-gpg-key">Add a password-protected secret <code>gpg</code> key</a></li>
<li><a href="#create-a-junit-report-from-phpunit">Create a JUnit report from PhpUnit</a></li>
</ul></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ul>

<!-- /toc -->

<p><!-- generated -->
<a id='introduction'> </a>
<!-- /generated --></p>

<h2>Introduction</h2>

<p>CI is short for <strong>C</strong>ontinuous <strong>I</strong>ntegration and to me mostly means <strong>running the code quality
tools and tests of a codebase in an isolated environment</strong> (preferably automatically). This is<br />
particularly important when working in a team, because <strong>the CI system acts as the final
gatekeeper</strong> before features or bugfixes are merged into the main branch.</p>

<p>I initially learned about CI systems when I stubbed my toes into the open source water. Back in the
day I used <a href="https://travis-ci.org/">Travis CI</a> for my own projects and replaced it
with <a href="https://github.com/features/actions">Github Actions</a> at some point. At ABOUT YOU we started
out with a self-hosted <a href="https://www.jenkins.io/">Jenkins</a> server and then moved on to
<a href="https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/">Gitlab CI</a> as a fully
managed solution (though we use <a href="https://docs.gitlab.com/runner/">custom runners</a>).</p>

<p><!-- generated -->
<a id='recommended-reading'> </a>
<!-- /generated --></p>

<h3>Recommended reading</h3>

<p>This tutorial builds on top of the previous parts. I'll do my best to cross-reference the 
corresponding articles when necessary, but I would still recommend to do some upfront reading on:</p>

<ul>
<li>the <a href="https://www.pascallandau.com/blog/structuring-the-docker-setup-for-php-projects/#structuring-the-repository">general folder structure</a>, the 
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#docker">update of the <code>.docker/</code> directory</a> and the introduction of a 
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#make-mk-includes"><code>.make/</code> directory</a></li>
<li>the <a href="https://www.pascallandau.com/blog/structuring-the-docker-setup-for-php-projects/#makefile-and-bashrc">general usage of <code>make</code></a> 
and <a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#makefile">it's evolution</a> as well as 
the <a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#make-docker-3">connection to <code>docker compose</code> commands</a></li>
<li>the concepts of the <a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#docker">docker containers and the <code>docker compose</code> setup</a></li>
</ul>

<p>And as a nice-to-know:
- the setup of <a href="https://www.pascallandau.com/blog/phpstorm-docker-xdebug-3-php-8-1-in-2022/#install-phpunit">PhpUnit for the <code>test</code> make target</a> as well as the 
  <a href="https://www.pascallandau.com/blog/php-qa-tools-make-docker/#qa-make-targets"><code>qa</code> make target</a>
- the <a href="https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/">usage of <code>git-secret</code> to handle secret values</a></p>

<p><!-- generated -->
<a id='approach'> </a>
<!-- /generated --></p>

<h3>Approach</h3>

<p>In this tutorial I'm going to explain <strong>how to make our existing docker setup work with Github Actions
and <a href="https://docs.gitlab.com/ee/ci/pipelines/">Gitlab CI/CD Pipelines</a></strong>. As I'm a big fan of a
"progressive enhancement" approach, we will ensure that <strong>all necessary steps can be performed 
locally through <code>make</code></strong>. This has the additional benefit of keeping a single source of truth (the
<code>Makefile</code>) which will come in handy when we set up the CI system on two different providers
(Github and Gitlab).</p>

<p>The general process will look very similar to the one for local development:</p>

<ul>
<li>build the docker setup</li>
<li>start the docker setup</li>
<li>run the qa tools</li>
<li>run the tests</li>
</ul>

<p>You can see the final results in the <a href="#ci-setup">CI setup</a> section, including the concrete <code>yml</code> 
files and links to the repositories, see</p>

<ul>
<li><a href="#setup-for-a-local-ci-run">Setup for a "local" CI run</a></li>
<li><a href="#setup-for-github-actions">Setup for Github Actions</a></li>
<li><a href="#setup-for-gitlab-pipelines">Setup for Gitlab Pipelines</a></li>
</ul>

<p>On a code level, we will <strong>treat CI as an environment</strong>, configured through the env variable <code>ENV</code>. So
far we only used <code>ENV=local</code> and we will extend that to also use <code>ENV=ci</code>. The necessary changes 
are explained after the concrete CI setup instructions in the sections</p>

<ul>
<li><a href="#docker-changes">Docker changes</a></li>
<li><a href="#makefile-changes">Makefile changes</a></li>
<li><a href="#codebase-changes">Codebase changes</a></li>
</ul>

<p><!-- generated -->
<a id='try-it-yourself'> </a>
<!-- /generated --></p>

<h3>Try it yourself</h3>

<p>To get a feeling for what's going on, you can start by 
<a href="#setup-for-a-local-ci-run">executing the local CI run</a>:</p>

<ul>
<li>checkout branch
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-7-ci-pipeline-docker-php-gitlab-github">part-7-ci-pipeline-docker-php-gitlab-github</a></li>
<li>initialize <code>make</code></li>
<li>run the <code>.local-ci.sh</code> script</li>
</ul>

<p>This should give you a similar output as presented in the <a href="#execution-example">Execution example</a>.</p>

<pre>git checkout part-7-ci-pipeline-docker-php-gitlab-github

# Initialize make
make make-init

# Execute the local CI run
bash .local-ci.sh
</pre>

<p><!-- generated -->
<a id='ci-setup'> </a>
<!-- /generated --></p>

<h2>CI setup</h2>

<p><!-- generated -->
<a id='general-ci-notes'> </a>
<!-- /generated --></p>

<h3>General CI notes</h3>

<p><!-- generated -->
<a id='initialize-make-for-ci'> </a>
<!-- /generated --></p>

<h4>Initialize <code>make</code> for CI</h4>

<p>As a very first step we need to "configure" the codebase to operate for the <code>ci</code> environment.
This is done through the <code>make-init</code> target as explained later in more detail in the
<a href="#makefile-changes">Makefile changes</a> section via</p>

<pre>make make-init ENVS="ENV=ci TAG=latest EXECUTE_IN_CONTAINER=true GPG_PASSWORD=12345678"
</pre>

<pre>$ make make-init ENVS="ENV=ci TAG=latest EXECUTE_IN_CONTAINER=true GPG_PASSWORD=12345678"
Created a local .make/.env file
</pre>

<p><code>ENV=ci</code> ensures that we</p>

<ul>
<li>use <a href="#env-based-docker-compose-config">the correct <code>docker compose</code> config files</a></li>
<li>use <a href="#build-target-ci">the <code>ci</code> build target</a></li>
</ul>

<p><code>TAG=latest</code> is just a simplification for now because we don't do anything with the images yet.
In an upcoming tutorial we will push them to a container registry for later usage in production
deployments and then set the <code>TAG</code> to something more meaningful (like the build number).</p>

<p><code>EXECUTE_IN_CONTAINER=true</code> forces every <code>make</code> command that uses a
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#run-commands-in-the-docker-containers"><code>RUN_IN_*_CONTAINER</code> setup</a>
to run in a container. This is important, because <strong>the Gitlab runner will actually run in a
docker container itself</strong>. However, this would cause any affected target <strong>to omit the 
<code>$(DOCKER_COMPOSER) exec</code> prefix</strong>.</p>

<p><a href="https://www.pascallandau.com/img/ci-pipeline-docker-php-gitlab-github/execute-always-in-docker.PNG"><img src="https://www.pascallandau.com/img/ci-pipeline-docker-php-gitlab-github/execute-always-in-docker.PNG" alt="Execute all targets in the application docker container" /></a></p>

<p><code>GPG_PASSWORD=12345678</code> is the password for the secret <code>gpg</code> key as mentioned in
<a href="#add-a-password-protected-secret-gpg-key">Add a password-protected secret <code>gpg</code> key</a>.</p>

<p><!-- generated -->
<a id='wait-for-service-sh'> </a>
<!-- /generated --></p>

<h4>wait-for-service.sh</h4>

<p>I'll explain the "container is up and running but the underlying service is not" problem
for the <code>mysql</code> service and how we can solve it with a health check later in this article at
<a href="#adding-a-health-check-for-mysql">Adding a health check for <code>mysql</code></a>.
On purpose, we don't want <code>docker compose</code> to take care of the waiting because we can make 
"better use of the waiting time" and will instead implement it ourselves with a simple bash 
script located at <code>.docker/scripts/wait-for-service.sh</code>:</p>

<pre>#!/bin/bash

name=$1
max=$2
interval=$3

[ -z "$1" ] &amp;&amp; echo "Usage example: bash wait-for-service.sh mysql 5 1"
[ -z "$2" ] &amp;&amp; max=30
[ -z "$3" ] &amp;&amp; interval=1

echo "Waiting for service '$name' to become healthy, checking every $interval second(s) for max. $max times"

while true; do 
  ((i++))
  echo "[$i/$max] ..."; 
  status=$(docker inspect --format "{{json .State.Health.Status }}" "$(docker ps --filter name="$name" -q)")
  if echo "$status" | grep -q '"healthy"'; then 
   echo "SUCCESS";
   break
  fi
  if [ $i == $max ]; then 
    echo "FAIL"; 
    exit 1
  fi 
  sleep $interval; 
done
</pre>

<p>This script waits for a docker <code>$service</code> to become "healthy" by
<a href="https://stackoverflow.com/a/42738182/413531">checking the <code>.State.Health.Status</code> info</a>
of the <code>docker inspect</code> command.</p>

<p><strong>CAUTION:</strong> The script uses <code>$(docker ps --filter name="$name" -q)</code> to determine the id of the
container, i.e. it will "match" all running containers against the <code>$name</code> - this would fail if
there is more than one matching container! I.e. you must ensure that <code>$name</code> is specific
enough to identify one single container uniquely.</p>

<p>The script will check up to <code>$max</code> times
in a interval of <code>$interval</code> seconds. See <a href="https://unix.stackexchange.com/a/82610">these</a>
<a href="https://unix.stackexchange.com/a/137639">answers</a> on the
"How do I write a retry logic in script to keep retrying to run it up to 5 times?" question for
the implementation of the retry logic. To check the health of the <code>mysql</code> service for 5
times with 1 seconds between each try, it can be called via</p>

<pre>bash wait-for-service.sh mysql 5 1
</pre>

<p>Output</p>

<pre>$ bash wait-for-service.sh mysql 5 1
Waiting for service 'mysql' to become healthy, checking every 1 second(s) for max. 5 times
[1/5] ...
[2/5] ...
[3/5] ...
[4/5] ...
[5/5] ...
FAIL

# OR

$ bash wait-for-service.sh mysql 5 1
Waiting for service 'mysql' to become healthy, checking every 1 second(s) for max. 5 times
[1/5] ...
[2/5] ...
SUCCESS
</pre>

<p>The problem of "container dependencies" isn't new and there are already some existing solutions
out there, e.g.</p>

<ul>
<li><a href="https://github.com/eficode/wait-for">wait-for</a></li>
<li><a href="https://github.com/vishnubob/wait-for-it">wait-for-it</a></li>
<li><a href="https://github.com/jwilder/dockerize#waiting-for-other-dependencies">dockerize</a></li>
<li><a href="https://github.com/ufoscout/docker-compose-wait">docker-compose-wait</a></li>
</ul>

<p>But unfortunately all of them operate by checking the availability of a <code>host:port</code> combination
and in the case of <code>mysql</code> that didn't help, because the container was up, the port was reachable
but the <code>mysql</code> service in the container was not.</p>

<p><!-- generated -->
<a id='setup-for-a-local-ci-run'> </a>
<!-- /generated --></p>

<h3>Setup for a "local" CI run</h3>

<p>As mentioned under <a href="#approach">Approach</a>, we want to be able to perform all necessary steps
locally and I created a corresponding script at <code>.local-ci.sh</code>:</p>

<pre>#!/bin/bash
# fail on any error 
# @see https://stackoverflow.com/a/3474556/413531
set -e

make docker-down ENV=ci || true

start_total=$(date +%s)

# STORE GPG KEY
cp secret-protected.gpg.example secret.gpg

# DEBUG
docker version
docker compose version
cat /etc/*-release || true

# SETUP DOCKER
make make-init ENVS="ENV=ci TAG=latest EXECUTE_IN_CONTAINER=true GPG_PASSWORD=12345678"
start_docker_build=$(date +%s)
make docker-build
end_docker_build=$(date +%s)
mkdir -p .build &amp;&amp; chmod 777 .build

# START DOCKER
start_docker_up=$(date +%s)
make docker-up
end_docker_up=$(date +%s)
make gpg-init
make secret-decrypt-with-password

# QA
start_qa=$(date +%s)
make qa || FAILED=true
end_qa=$(date +%s)

# WAIT FOR CONTAINERS
start_wait_for_containers=$(date +%s)
bash .docker/scripts/wait-for-service.sh mysql 30 1
end_wait_for_containers=$(date +%s)

# TEST
start_test=$(date +%s)
make test || FAILED=true
end_test=$(date +%s)

end_total=$(date +%s)

# RUNTIMES
echo "Build docker:        " `expr $end_docker_build - $start_docker_build`
echo "Start docker:        " `expr $end_docker_up - $start_docker_up  `
echo "QA:                  " `expr $end_qa - $start_qa`
echo "Wait for containers: " `expr $end_wait_for_containers - $start_wait_for_containers`
echo "Tests:               " `expr $end_test - $start_test`
echo "---------------------"
echo "Total:               " `expr $end_total - $start_total`

# CLEANUP
# reset the default make variables
make make-init
make docker-down ENV=ci || true

# EVALUATE RESULTS
if [ "$FAILED" == "true" ]; then echo "FAILED"; exit 1; fi

echo "SUCCESS"
</pre>

<p><!-- generated -->
<a id='run-details'> </a>
<!-- /generated --></p>

<h4>Run details</h4>

<ul>
<li><p>as a preparation step, we first ensure that no outdated <code>ci</code> containers are running (this is
only necessary locally, because runners on a remote CI system will start "from scratch")</p>

<pre>make docker-down ENV=ci || true
</pre></li>
<li><p>we take some time measurements to understand how long certain parts take via</p>

<pre>start_total=$(date +%s)
</pre>

<p>to store the current timestamp</p></li>
<li><p>we need the secret <code>gpg</code> key in order to decrypt the secrets and simply copy the
<a href="#add-a-password-protected-secret-gpg-key">password-protected example key</a> 
(in the actual CI systems the key will be configured as a secret value that is injected in 
the run)</p>

<pre># STORE GPG KEY
cp secret-protected.gpg.example secret.gpg
</pre></li>
<li><p>I like printing some debugging info in order to understand which exact circumstances
we're dealing with (tbh, this is mostly relevant when setting the CI system up or making
modifications to it)</p>

<pre># DEBUG
docker version
docker compose version
cat /etc/*-release || true
</pre></li>
<li><p>for the docker setup, we start with
<a href="#initialize-make-for-ci">initializing the environment for <code>ci</code></a></p>

<pre># SETUP DOCKER
make make-init ENVS="ENV=ci TAG=latest EXECUTE_IN_CONTAINER=true GPG_PASSWORD=12345678"
</pre>

<p>then build the docker setup</p>

<pre>make docker-build
</pre>

<p>and finally add a <code>.build/</code> directory to
<a href="#create-a-junit-report-from-phpunit">collect the build artifacts</a></p>

<pre>mkdir -p .build &amp;&amp; chmod 777 .build
</pre></li>
<li><p>then, the docker setup is started</p>

<pre># START DOCKER
make docker-up
</pre>

<p>and <code>gpg</code> is initialized so that
<a href="#add-a-password-protected-secret-gpg-key">the secrets can be decrypted</a></p>

<pre>make gpg-init
make secret-decrypt-with-password
</pre>

<p>We don't need to pass a <code>GPG_PASSWORD</code> to <code>secret-decrypt-with-password</code> because we have set
it up in the previous step as a default value via <code>make-init</code></p></li>
<li><p>once the <code>application</code> container is running, the qa tools are run by invoking the
<a href="https://www.pascallandau.com/blog/php-qa-tools-make-docker/#the-qa-target"><code>qa</code> make target</a></p>

<pre># QA
make qa || FAILED=true
</pre>

<p>The <code>|| FAILED=true</code> part makes sure that the script will not be terminated if the checks fail.
Instead, the fact that a failure happened is "recorded" in the <code>FAILED</code> variable so that we
can evaluate it at the end. We don't want the script to stop here because we want the
following steps to be executed as well (e.g. the tests).</p></li>
<li><p>to mitigate the
<a href="#adding-a-health-check-for-mysql">"<code>mysql</code> is not ready" problem</a>, we will now apply the
<a href="#wait-for-service-sh">wait-for-service.sh script</a></p>

<pre># WAIT FOR CONTAINERS
bash .docker/scripts/wait-for-service.sh mysql 30 1
</pre></li>
<li><p>once <code>mysql</code> is ready, we can execute the tests via the 
<a href="https://www.pascallandau.com/blog/phpstorm-docker-xdebug-3-php-8-1-in-2022/#install-phpunit"><code>test</code> make target</a> and 
apply the same <code>|| FAILED=true</code> workaround as for the qa tools</p>

<pre># TEST
make test || FAILED=true
</pre></li>
<li><p>finally, all the timers are printed</p>

<pre># RUNTIMES
echo "Build docker:        " `expr $end_docker_build - $start_docker_build`
echo "Start docker:        " `expr $end_docker_up - $start_docker_up  `
echo "QA:                  " `expr $end_qa - $start_qa`
echo "Wait for containers: " `expr $end_wait_for_containers - $start_wait_for_containers`
echo "Tests:               " `expr $end_test - $start_test`
echo "---------------------"
echo "Total:               " `expr $end_total - $start_total`
</pre></li>
<li><p>we clean up the resources (this is only necessary when running locally, because the runner of
a CI system would be shut down anyway)</p>

<pre># CLEANUP
make make-init
make docker-down ENV=ci || true
</pre></li>
<li><p>and finally evaluate if any error occurred when running the qa tools or the tests</p>

<pre># EVALUATE RESULTS
if [ "$FAILED" == "true" ]; then echo "FAILED"; exit 1; fi

echo "SUCCESS"
</pre></li>
</ul>

<p><!-- generated -->
<a id='execution-example'> </a>
<!-- /generated --></p>

<h4>Execution example</h4>

<p>Executing the script via</p>

<pre>bash .local-ci.sh
</pre>

<p>yields the following (shortened) output:</p>

<pre>$ bash .local-ci.sh
Container dofroscra_ci-redis-1  Stopping
# Stopping all other `ci` containers ...
# ...

Client:
 Cloud integration: v1.0.22
 Version:           20.10.13
# Print more debugging info ...
# ...

Created a local .make/.env file
ENV=ci TAG=latest DOCKER_REGISTRY=docker.io DOCKER_NAMESPACE=dofroscra APP_USER_NAME=application APP_GROUP_NAME=application docker compose -p dofroscra_ci --env-file ./.docker/.env -f ./.docker/docker-compose/docker-compose-php-base.yml build php-base
#1 [internal] load build definition from Dockerfile
# Output from building the docker containers 
# ...

ENV=ci TAG=latest DOCKER_REGISTRY=docker.io DOCKER_NAMESPACE=dofroscra APP_USER_NAME=application APP_GROUP_NAME=application docker compose -p dofroscra_ci --env-file ./.docker/.env -f ./.docker/docker-compose/docker-compose.local.ci.yml -f ./.docker/docker-compose/docker-compose.ci.yml up -d
Network dofroscra_ci_network  Creating
# Starting all `ci` containers ...
# ...

"C:/Program Files/Git/mingw64/bin/make" -s gpg-import GPG_KEY_FILES="secret.gpg"
gpg: directory '/home/application/.gnupg' created
gpg: keybox '/home/application/.gnupg/pubring.kbx' created
gpg: /home/application/.gnupg/trustdb.gpg: trustdb created
gpg: key D7A860BBB91B60C7: public key "Alice Doe protected &lt;alice.protected@example.com&gt;" imported
# Output of importing the secret and public gpg keys
# ...

"C:/Program Files/Git/mingw64/bin/make" -s git-secret ARGS="reveal -f -p 12345678"
git-secret: done. 1 of 1 files are revealed.
"C:/Program Files/Git/mingw64/bin/make" -j 8 -k --no-print-directory --output-sync=target qa-exec NO_PROGRESS=true
phplint                             done   took 4s
phpcs                               done   took 4s
phpstan                             done   took 8s
composer-require-checker            done   took 8s
Waiting for service 'mysql' to become healthy, checking every 1 second(s) for max. 30 times
[1/30] ...
SUCCESS
PHPUnit 9.5.19 #StandWithUkraine

........                                                            8 / 8 (100%)

Time: 00:03.077, Memory: 28.00 MB

OK (8 tests, 15 assertions)
Build docker:         12
Start docker:         2
QA:                   9
Wait for containers:  3
Tests:                5
---------------------
Total:                46
Created a local .make/.env file

Container dofroscra_ci-application-1  Stopping
Container dofroscra_ci-mysql-1  Stopping
# Stopping all other `ci` containers ...
# ...

SUCCESS
</pre>

<p><!-- generated -->
<a id='setup-for-github-actions'> </a>
<!-- /generated --></p>

<h3>Setup for Github Actions</h3>

<ul>
<li><a href="https://github.com/paslandau/docker-php-tutorial/tree/part-7-ci-pipeline-docker-php-gitlab-github">Repository (branch <code>part-7-ci-pipeline-docker-php-gitlab-github</code>)</a></li>
<li><a href="https://github.com/paslandau/docker-php-tutorial/actions">CI/CD overview (Actions)</a></li>
<li><a href="https://github.com/paslandau/docker-php-tutorial/runs/5866235820?check_suite_focus=true">Example of a successful job</a></li>
<li><a href="https://github.com/paslandau/docker-php-tutorial/runs/5867485802?check_suite_focus=true">Example of a failed job</a></li>
</ul>

<p><a href="https://www.pascallandau.com/img/ci-pipeline-docker-php-gitlab-github/github-action-example.PNG"><img src="https://www.pascallandau.com/img/ci-pipeline-docker-php-gitlab-github/github-action-example.PNG" alt="Github Action example" /></a></p>

<p>If you are completely new to Github Actions, I recommend to start with the
<a href="https://docs.github.com/en/actions/quickstart">official Quickstart Guide for GitHub Actions</a>
and the
<a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">Understanding GitHub Actions</a>
article. In short:</p>

<ul>
<li>Github Actions are based on so called <strong>Workflows</strong>

<ul>
<li>Workflows are <code>yaml</code> files that  live in the special <code>.github/workflows</code> directory in the
repository</li>
</ul></li>
<li>a Workflow can contain multiple <strong>Jobs</strong></li>
<li>each Job consists of a series of <strong>Steps</strong></li>
<li><p>each Step needs a <code>run:</code> element that represents a command that is executed by a new shell</p>

<ul>
<li>multi-line commands that should use the same shell are written as</li>
</ul>

<pre>  - run : |
        echo "line 1"
        echo "line 2"
</pre>

<p>See also <a href="https://stackoverflow.com/a/59536836/413531">difference between "run |" and multiple runs in github actions</a></p></li>
</ul>

<p><!-- generated -->
<a id='the-workflow-file'> </a>
<!-- /generated --></p>

<hr/><p><b>Due to technical constraints, this article is capped at 30000 characters. Read the full content at <a href='https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/'>CI Pipelines for dockerized PHP Apps with Github & Gitlab [Tutorial Part 7]</a></b></p>
]]></description>
                <pubDate>Mon, 25 Apr 2022 07:00:00 +0000</pubDate>
                <link>https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/?utm_source=blog&amp;utm_medium=rss&amp;utm_campaign=feed-codeproject-com</link>
                <guid isPermaLink="true">https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/</guid>
            </item>
                    <item>
                <title>Use git-secret to encrypt secrets in the repository [Tutorial Part 6]</title>
                <description><![CDATA[<p>This article appeared first on <a href='https://www.pascallandau.com/'>https://www.pascallandau.com/</a> at <a href='https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/'>Use git-secret to encrypt secrets in the repository [Tutorial Part 6]</a></p>
<hr />

<p>In the sixth part of this tutorial series on developing PHP on Docker we will <strong>setup <code>git-secret</code>
to store secrets directly in the repository</strong>. Everything will be handled through Docker and 
added as make targets for a convenient workflow.</p>

<p><a href="https://www.pascallandau.com/img/git-secret-encrypt-repository-docker/git-secret-example.gif"><img src="https://www.pascallandau.com/img/git-secret-encrypt-repository-docker/git-secret-example.gif" alt="git-secret example" title="git-secret example" /></a></p>

<p><small>
FYI: 
This tutorial is a precursor to the next a part 
<a href="https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/">Create a CI pipeline for dockerized PHP Apps</a>
because dealing with secrets is an important aspect when setting up a CI system (and later when 
deploying to production) - but I feel it's complex enough to warrant its own article.
</small></p>

<div class="youtube">
<iframe width="560" height="315" src="https://www.youtube.com/embed/pZ-vFMfKcLY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<p><strong>All code samples are publicly available</strong> in my
<a href="https://github.com/paslandau/docker-php-tutorial/">Docker PHP Tutorial repository on Github</a>.<br />
You find the branch with the final result of this tutorial at
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-6-git-secret-encrypt-repository-docker">part-6-git-secret-encrypt-repository-docker</a>.</p>

<p><strong>All published parts of the Docker PHP Tutorial</strong> are collected under a dedicated page at
<a href="https://www.pascallandau.com/docker-php-tutorial/">Docker PHP Tutorial</a>. The previous part was
<a href="https://www.pascallandau.com/blog/php-qa-tools-make-docker/">Set up PHP QA tools and control them via make</a>
and the following one is
<a href="https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/">Create a CI pipeline for dockerized PHP Apps</a>.</p>

<p>If you want to follow along, please subscribe to the <a href="https://www.pascallandau.com/feed.xml">RSS feed</a>
or <a href="#newsletter">via email</a> to get <strong>automatic notifications</strong> when the next part comes out :)</p>

<p><!-- generated -->
<a id='table-of-contents'> </a>
<!-- /generated --></p>

<h2>Table of contents</h2>

<!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#tooling">Tooling</a>

<ul>
<li><a href="#gpg">gpg</a>

<ul>
<li><a href="#gpg-installation">gpg installation</a></li>
<li><a href="#gpg-usage">gpg usage</a>

<ul>
<li><a href="#create-gpg-key-pair">Create GPG key pair</a></li>
<li><a href="#export-list-and-import-private-gpg-keys">Export, list and import private GPG keys</a></li>
<li><a href="#export-list-and-import-public-gpg-keys">Export, list and import public GPG keys</a></li>
</ul></li>
</ul></li>
<li><a href="#git-secret">git-secret</a>

<ul>
<li><a href="#git-secret-installation">git-secret installation</a>

<ul>
<li><a href="#the-git-permission-issue">The <code>git</code> permission issue</a></li>
</ul></li>
<li><a href="#git-secret-usage">git-secret usage</a>

<ul>
<li><a href="#initialize-git-secret">Initialize git-secret</a>

<ul>
<li><a href="#the-git-secret-directory-and-the-gpg-agent-socket">The <code>git-secret</code> directory and the <code>gpg-agent</code> socket</a></li>
</ul></li>
<li><a href="#adding-listing-and-removing-users">Adding, listing and removing users</a>

<ul>
<li><a href="#reminder-rotate-the-encrypted-secrets">Reminder: Rotate the encrypted secrets</a></li>
</ul></li>
<li><a href="#adding-listing-and-removing-files-for-encryption">Adding, listing and removing files for encryption</a></li>
<li><a href="#encrypt-files">Encrypt files</a></li>
<li><a href="#decrypting-files">Decrypting files</a></li>
<li><a href="#show-changes-between-encrypted-and-decrypted-files">Show changes between encrypted and decrypted files</a></li>
</ul></li>
</ul></li>
</ul></li>
<li><a href="#makefile-adjustments">Makefile adjustments</a></li>
<li><a href="#workflow">Workflow</a>

<ul>
<li><a href="#process-challenges">Process challenges</a>

<ul>
<li><a href="#updating-secrets">Updating secrets</a></li>
<li><a href="#code-reviews-and-merge-conflicts">Code reviews and merge conflicts</a></li>
<li><a href="#local-git-secret-and-gpg-setup">Local <code>git-secret</code> and <code>gpg</code> setup</a></li>
</ul></li>
<li><a href="#scenarios">Scenarios</a>

<ul>
<li><a href="#initial-setup-of-gpg-keys">Initial setup of <code>gpg</code> keys</a></li>
<li><a href="#initial-setup-of-git-secret">Initial setup of <code>git-secret</code></a></li>
<li><a href="#initialize-gpg-after-container-startup">Initialize <code>gpg</code> after container startup</a></li>
<li><a href="#adding-new-team-members">Adding (new) team members</a></li>
<li><a href="#adding-and-encrypting-files">Adding and encrypting files</a></li>
<li><a href="#decrypt-files">Decrypt files</a></li>
<li><a href="#removing-files">Removing files</a></li>
<li><a href="#removing-team-members">Removing team members</a></li>
</ul></li>
</ul></li>
<li><a href="#pros-and-cons">Pros and cons</a>

<ul>
<li><a href="#pro">Pro</a></li>
<li><a href="#cons">Cons</a></li>
</ul></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ul>

<!-- /toc -->

<p><!-- generated -->
<a id='introduction'> </a>
<!-- /generated --></p>

<h2>Introduction</h2>

<p>Dealing with secrets (passwords, tokens, key files, etc.) is close to "naming things"
when it comes to hard problems in software engineering. Some things to consider:</p>

<ul>
<li><strong>security is paramount</strong> - but high security often goes hand in hand with high inconvenience

<ul>
<li>and if things get too complicated, people look for shortcuts...</li>
</ul></li>
<li>in a team, <strong>sharing certain secret values</strong> is often mandatory

<ul>
<li>so now we need to think about secure ways to distribute and update secrets across multiple
people</li>
</ul></li>
<li>concrete secret values often <strong>depend on the environment</strong>

<ul>
<li>inherently tricky to "test" or even "review", because those values are "by definition"
different on "your machine" than on "production"</li>
</ul></li>
</ul>

<p>In fact, entire products have been build around dealing with secrets, e.g.
<a href="https://www.vaultproject.io/">HashiCorp Vault</a>,
<a href="https://aws.amazon.com/secrets-manager/">AWS Secrets Manager</a> or the
<a href="https://cloud.google.com/secret-manager">GCP Secret Manager</a>. Introducing those in a project comes
with a certain overhead as it's yet another service that needs to be integrated and<br />
maintained. Maybe it is the exactly right decision for your use-case - maybe it's overkill.
By the end of this article you'll at least be aware of an alternative with a lower barrier to entry.
See also the <a href="#pros-and-cons">Pros and cons</a> section in the end for an overview.</p>

<p>Even though it's
<a href="https://withblue.ink/2021/05/07/storing-secrets-and-passwords-in-git-is-bad.html">generally not advised to store secrets in a repository</a>,
I'll propose exactly that in this tutorial:</p>

<ul>
<li>identify files that contain secret values</li>
<li>make sure they are added to <code>.gitignore</code></li>
<li>encrypt them via <code>git-secret</code></li>
<li>commit the encrypted files to the repository</li>
</ul>

<p>In the end, we will be able to call</p>

<pre>make secret-decrypt
</pre>

<p>to reveal secrets in the codebase, make modifications to them if necessary and then run</p>

<pre>make secret-encrypt
</pre>

<p>to encrypt them again so that they can be committed (and pushed to the remote repository). To 
see it in action, check out branch
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-6-git-secret-encrypt-repository-docker">part-6-git-secret-encrypt-repository-docker</a>
and run the following commands:</p>

<pre># checkout the branch
git checkout part-6-git-secret-encrypt-repository-docker

# build and start the docker setup
make make-init
make docker-build
make docker-up

# "create" the secret key - the file "secret.gpg.example" would usually NOT live in the repo!
cp secret.gpg.example secret.gpg

# initialize gpg
make gpg-init

# ensure that the decrypted secret file does not exist
ls passwords.txt

# decrypt the secret file
make secret-decrypt

# show the content of the secret file
cat passwords.txt
</pre>

<p><!-- generated -->
<a id='tooling'> </a>
<!-- /generated --></p>

<h2>Tooling</h2>

<p>We will set up <code>gpg</code> and <code>git-secret</code> in the php <code>base</code> image, so that the tools become available in
all other containers. Please refer to
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/">Docker from scratch for PHP 8.1 Applications in 2022</a>
for an in-depth explanation of the docker images.</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <strong>Caution</strong>
  </div>
  <div class="panel-body bg-danger">
    All following commands are 
    <strong>executed <em>in</em> the <code>application</code> container.</strong>
    <br />
    <br />
    <strong>Tip:</strong>
    <br />
    See <a href="https://www.pascallandau.com/blog/structuring-the-docker-setup-for-php-projects/#easy-container-access-via -din-bashrc-helper">Easy container access via din .bashrc helper</a>
    for a convenient shortcut to log into docker containers.
  </div>
</div>

<p>Please note, that there is a caveat when using <code>git-secret</code> in a folder that is shared between 
the host system and a docker container. I'll explain that in more detail (including a workaround) 
in section 
<a href="#the-git-secret-directory-and-the-gpg-agent-socket">The <code>git-secret</code> directory and the <code>gpg-agent</code> socket</a>.</p>

<p><!-- generated -->
<a id='gpg'> </a>
<!-- /generated --></p>

<h3>gpg</h3>

<p><code>gpg</code> is short for <a href="https://gnupg.org/">The GNU Privacy Guard</a> and is an open source implementation
of the OpenPGP standard. In short, it allows us to create a personal key file pair
(similar to SSH keys) with a private secret key and a public
key that can be shared with other parties whose messages you want to decrypt.</p>

<p><!-- generated -->
<a id='gpg-installation'> </a>
<!-- /generated --></p>

<h4>gpg installation</h4>

<p>To install it, we can simply run <code>apk add gnupg</code> and thus update 
<code>.docker/images/php/base/Dockerfile</code> accordingly</p>

<pre># File: .docker/images/php/base/Dockerfile

RUN apk add --update --no-cache \
        bash \
        gnupg \
        make \
#...
</pre>

<p><!-- generated -->
<a id='gpg-usage'> </a>
<!-- /generated --></p>

<h4>gpg usage</h4>

<p>I'll only cover the strictly necessary <code>gpg</code> commands here. Please refer to
<a href="https://git-secret.io/#using-gpg">the "Using GPG" section in the <code>git-secret</code> docu</a>
for further information.</p>

<p><!-- generated -->
<a id='create-gpg-key-pair'> </a>
<!-- /generated --></p>

<h5>Create GPG key pair</h5>

<p>We need <code>gpg</code> to <strong>create the gpg key pair</strong> via</p>

<pre>name="Pascal Landau"
email="pascal.landau@example.com"
gpg --batch --gen-key &lt;&lt;EOF
Key-Type: 1
Key-Length: 2048
Subkey-Type: 1
Subkey-Length: 2048
Name-Real: $name
Name-Email: $email
Expire-Date: 0
%no-protection
EOF
</pre>

<p>The <code>%no-protection</code> will create a key without password, see
also <a href="https://gist.github.com/woods/8970150">this gist to "Creating gpg keys non-interactively"</a>.
To use a password (e.g. <code>12345678</code>, we could have replace the <code>%no-protection</code> line with</p>

<pre>Passphrase: 12345678
</pre>

<p>All options for the unattended creation are defined in the 
<a href="https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html">official docs at "Unattended key generation"</a>.</p>

<p>Output:</p>

<pre>$ name="Pascal Landau"
$ email="pascal.landau@example.com"
$ gpg --batch --gen-key &lt;&lt;EOF
&gt; Key-Type: 1
&gt; Key-Length: 2048
&gt; Subkey-Type: 1
&gt; Subkey-Length: 2048
&gt; Name-Real: $name
&gt; Name-Email: $email
&gt; Expire-Date: 0
&gt; %no-protection
&gt; EOF
gpg: key E1E734E00B611C26 marked as ultimately trusted
gpg: revocation certificate stored as '/root/.gnupg/opengpg-revocs.d/74082D81525723F5BF5B2099E1E734E00B611C26.rev'
</pre>

<p>You could also run <code>gpg --gen-key</code> without the <code>--batch</code> flag to be guided interactively through the
process.</p>

<p><!-- generated -->
<a id='export-list-and-import-private-gpg-keys'> </a>
<!-- /generated --></p>

<h5>Export, list and import private GPG keys</h5>

<p>The <strong>private key can be exported</strong> via</p>

<pre>email="pascal.landau@example.com"
path="secret.gpg"
gpg --output "$path" --armor --export-secret-key "$email"
</pre>

<p><strong>This secret key must never be shared</strong>!</p>

<p>It looks like this:</p>

<pre>-----BEGIN PGP PRIVATE KEY BLOCK-----

lQOYBF7VVBwBCADo9un+SySu/InHSkPDpFVKuZXg/s4BbZmqFtYjvUUSoRAeSejv
G21nwttQGut+F+GdpDJL6W4pmLS31Kxpt6LCAxhID+PRYiJQ4k3inJfeUx7Ws339
XDPO3Rys+CmnZchcEgnbOfQlEqo51DMj6mRF2Ra/6svh7lqhrixGx1BaKn6VlHkC
...
ncIcHxNZt7eK644nWDn7j52HsRi+wcWsZ9mjkUgZLtyMPJNB5qlKQ18QgVdEAhuZ
xT3SieoBPd+tZikhu3BqyIifmLnxOJOjOIhbQrgFiblvzU1iOUOTOcSIB+7A
=YmRm
-----END PGP PRIVATE KEY BLOCK-----
</pre>

<p>All <strong>secret keys can be listed</strong> via</p>

<pre>gpg --list-secret-keys
</pre>

<p>Output:</p>

<pre>$ gpg --list-secret-keys
/root/.gnupg/pubring.kbx
------------------------
sec   rsa2048 2022-03-27 [SCEA]
      74082D81525723F5BF5B2099E1E734E00B611C26
uid           [ultimate] Pascal Landau &lt;pascal.landau@example.com&gt;
ssb   rsa2048 2022-03-27 [SEA]

</pre>

<p>You can <strong>import the private key</strong> via</p>

<pre>path="secret.gpg"
gpg --import "$path"
</pre>

<p>and get the following output:</p>

<pre>$ path="secret.gpg"
$ gpg --import "$path"
gpg: key E1E734E00B611C26: "Pascal Landau &lt;pascal.landau@example.com&gt;" not changed
gpg: key E1E734E00B611C26: secret key imported
gpg: Total number processed: 1
gpg:              unchanged: 1
gpg:       secret keys read: 1
gpg:  secret keys unchanged: 1
</pre>

<p><strong>Caution:</strong> If the secret key requires a password, you would now be prompted for it. We can 
circumvent the prompt by using <code>--batch --yes --pinentry-mode loopback</code>:</p>

<pre>path="secret.gpg"
gpg --import --batch --yes --pinentry-mode loopback "$path"
</pre>

<p>See also <a href="https://betakuang.medium.com/using-command-line-passphrase-input-for-gpg-with-git-for-windows-f78ae2c7cd2e">Using Command-Line Passphrase Input for GPG</a>.
In doing so, we don't need to provide the password just yet - but we must pass it later when we 
attempt to <a href="#decrypting-files">decrypt files</a>.</p>

<p><!-- generated -->
<a id='export-list-and-import-public-gpg-keys'> </a>
<!-- /generated --></p>

<h5>Export, list and import public GPG keys</h5>

<p>The <strong>public key can be exported</strong> to <code>public.gpg</code> via</p>

<pre>email="pascal.landau@example.com"
path="public.gpg"
gpg --armor --export "$email" &gt; "$path"
</pre>

<p>It looks like this:</p>

<pre>-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBF7VVBwBCADo9un+SySu/InHSkPDpFVKuZXg/s4BbZmqFtYjvUUSoRAeSejv
G21nwttQGut+F+GdpDJL6W4pmLS31Kxpt6LCAxhID+PRYiJQ4k3inJfeUx7Ws339
...
3LLbK7Qxz0cV12K7B+n2ei466QAYXo03a7WlsPWn0JTFCsHoCOphjaVsncIcHxNZ
t7eK644nWDn7j52HsRi+wcWsZ9mjkUgZLtyMPJNB5qlKQ18QgVdEAhuZxT3SieoB
Pd+tZikhu3BqyIifmLnxOJOjOIhbQrgFiblvzU1iOUOTOcSIB+7A
=g0hF
-----END PGP PUBLIC KEY BLOCK-----
</pre>

<p><strong>List all public keys</strong> via</p>

<pre>gpg --list-keys
</pre>

<p>Output:</p>

<pre>$ gpg --list-keys
/root/.gnupg/pubring.kbx
------------------------
pub   rsa2048 2022-03-27 [SCEA]
      74082D81525723F5BF5B2099E1E734E00B611C26
uid           [ultimate] Pascal Landau &lt;pascal.landau@example.com&gt;
sub   rsa2048 2022-03-27 [SEA]
</pre>

<p>The <strong>public key can be imported</strong> in the same way as private keys via</p>

<pre>path="public.gpg"
gpg --import "$path"
</pre>

<p>Example:</p>

<pre>$ gpg --import /var/www/app/public.gpg
gpg: key E1E734E00B611C26: "Pascal Landau &lt;pascal.landau@example.com&gt;" not changed
gpg: Total number processed: 1
gpg:              unchanged: 1
</pre>

<p><!-- generated -->
<a id='git-secret'> </a>
<!-- /generated --></p>

<h3>git-secret</h3>

<p>The official website of <a href="https://git-secret.io/">git-secret</a> is already doing a great job of
introducing the tool. In short, it allows us to <strong>declare certain files as "secrets"</strong> and <strong>encrypt
them via <code>gpg</code></strong> - using the keys of all trusted parties. The encrypted file can then by <strong>stored
safely directly in the git repository</strong> and <strong>decrypted if required</strong>.</p>

<p>In this tutorial I'm using <code>git-secret v0.4.0</code></p>

<pre>$ git secret --version
0.4.0
</pre>

<p><!-- generated -->
<a id='git-secret-installation'> </a>
<!-- /generated --></p>

<h4>git-secret installation</h4>

<p>The <a href="https://git-secret.io/installation#alpine">installation instructions for Alpine</a> read as
follows:</p>

<pre>sh -c "echo 'https://gitsecret.jfrog.io/artifactory/git-secret-apk/all/main'" &gt;&gt; /etc/apk/repositories
wget -O /etc/apk/keys/git-secret-apk.rsa.pub 'https://gitsecret.jfrog.io/artifactory/api/security/keypair/public/repositories/git-secret-apk'
apk add --update --no-cache git-secret
</pre>

<p>Plus, we need to account for a recent change in <code>git</code> that requires that the parent directory is 
owned by the user executing the <code>git</code> command. See also the more detailed explanation in section
<a href="#the-git-permission-issue">The <code>git</code> permission issue</a>.</p>

<p>We update the <code>.docker/images/php/base/Dockerfile</code> accordingly:</p>

<pre># File: .docker/images/php/base/Dockerfile

# install git-secret
# @see https://git-secret.io/installation#alpine
ADD https://gitsecret.jfrog.io/artifactory/api/security/keypair/public/repositories/git-secret-apk /etc/apk/keys/git-secret-apk.rsa.pub

RUN echo "https://gitsecret.jfrog.io/artifactory/git-secret-apk/all/main" &gt;&gt; /etc/apk/repositories  &amp;&amp; \
    apk add --update --no-cache \
        bash \
        git-secret \
        gawk \
        gnupg \
        make \
#...

# Fix the git permission issue
RUN git config --system --add safe.directory "$APP_CODE_PATH"
</pre>

<p><!-- generated -->
<a id='the-git-permission-issue'> </a>
<!-- /generated --></p>

<h5>The <code>git</code> permission issue</h5>

<p>In April 2022, 
<a href="https://github.blog/2022-04-12-git-security-vulnerability-announced/">Github accounced the security vulnerability <code>CVE-2022-24765</code></a>,
that was fixed in <code>git v2.35.2</code></p>

<blockquote>
  <p>This version changes Git’s behavior when looking for a top-level <code>.git</code> directory to stop when 
  its directory traversal changes ownership from the current user.</p>
</blockquote>

<p>In practice, the following error occurs if the parent directory is not owned by the user that 
executes the <code>git</code> command</p>

<pre>Error: fatal: unsafe repository ('/parent/dir/of/.git-folder' is owned by someone else)
To add an exception for this directory, call:

    git config --global --add safe.directory /parent/dir/of/.git-folder
</pre>

<p>When using <code>git secret</code>, we would get the slightly misleading error message</p>

<pre>git-secret: abort: not in dir with git repo. Use 'git init' or 'git clone', then in repo use 'git secret init'
</pre>

<p>We can "fix" the issue by using the new multi-valued 
<a href="https://git-scm.com/docs/git-config/2.36.0#Documentation/git-config.txt-safedirectory">safe.directory</a> 
configuration via</p>

<pre><code>git config --system --add safe.directory /parent/dir/of/.git-folder
</code></pre>

<p>Note, that we didn't use the suggested <code>--global</code> option but <code>--system</code> instead, so that the 
configuration is set for <em>any</em> user.</p>

<p>Wait - why not just ensure <strong>that the parent directory of the <code>.git</code> folder has the correct 
permissions</strong>?</p>

<p>Well... there's currently (2022-05-28) a <strong>bug in Docker Desktop that makes the permissions of bind 
mounts kinda unpredictable</strong>, see 
<a href="https://github.com/docker/for-win/issues/12742">Ownership of files set via bind mount is set to user who accesses the file first</a>
and by applying the fix directly in the <code>Dockerfile</code> we can solve the issue reliably.</p>

<p><!-- generated -->
<a id='git-secret-usage'> </a>
<!-- /generated --></p>

<h4>git-secret usage</h4>

<p><!-- generated -->
<a id='initialize-git-secret'> </a>
<!-- /generated --></p>

<h5>Initialize git-secret</h5>

<p><code>git-secret</code> is initialized via the following command <em>run in the root of the git repository</em></p>

<pre>git secret init
</pre>

<pre>$ git secret init
git-secret: init created: '/var/www/app/.gitsecret/'
</pre>

<p>We only need to do this once, because we'll commit the folder to git later. It contains the
following files:</p>

<pre>$ git status | grep ".gitsecret"
        new file:   .gitsecret/keys/pubring.kbx
        new file:   .gitsecret/keys/pubring.kbx~
        new file:   .gitsecret/keys/trustdb.gpg
        new file:   .gitsecret/paths/mapping.cfg
</pre>

<p>The <code>pubring.kbx~</code> file (with the trailing tilde <code>~</code>) is only a temporary file and can safely be
git-ignored. See also
<a href="https://github.com/sobolevn/git-secret/issues/566#issuecomment-570059374">Can't find any docs about keyring.kbx~ file</a>.</p>

<p><!-- generated -->
<a id='the-git-secret-directory-and-the-gpg-agent-socket'> </a>
<!-- /generated --></p>

<h6>The <code>git-secret</code> directory and the <code>gpg-agent</code> socket</h6>

<p>To use <code>git-secret</code> in a directory that is <strong>shared between the host system and docker</strong>, we need to 
also run the following commands:</p>

<pre>tee .gitsecret/keys/S.gpg-agent &lt;&lt;EOF
%Assuan%
socket=/tmp/S.gpg-agent
EOF

tee .gitsecret/keys/S.gpg-agent.ssh &lt;&lt;EOF
%Assuan%
socket=/tmp/S.gpg-agent.ssh
EOF

tee .gitsecret/keys/gpg-agent.conf &lt;&lt;EOF
extra-socket /tmp/S.gpg-agent.extra
browser-socket /tmp/S.gpg-agent.browser
EOF
</pre>

<p>This is necessary because there is an issue <strong>when <code>git-secret</code> is used in a setup where the 
codebase is shared between the host system and a docker container</strong>. 
I've explained the details in the Github issue
<a href="https://github.com/sobolevn/git-secret/issues/806">"gpg: can't connect to the agent: IPC connect call failed" error in docker alpine on shared volume</a>.</p>

<p>In short:</p>

<ul>
<li><code>gpg</code> uses a <code>gpg-agent</code> to perform its tasks and the two tools communicate through sockets 
that are created in the <code>--home-directory</code> of the <code>gpg-agent</code></li>
<li>the agent is started implicitly through a <code>gpg</code> command used by <code>git-secret</code>, using the 
<code>.gitsecret/keys</code> directories as a <code>--home-directory</code></li>
<li>because the location of the <code>--home-directory</code> is shared with the host system, the socket 
creation fails (potentially only an issue for Docker Desktop, see the related discussion in 
Github issue <a href="https://github.com/docker/for-mac/issues/483#issuecomment-647325015">Support for sharing unix sockets</a>)</li>
</ul>

<p>The corresponding error messages are</p>

<pre>gpg: can't connect to the agent: IPC connect call failed

gpg-agent: error binding socket to '/var/www/app/.gitsecret/keys/S.gpg-agent': I/O error
</pre>

<p>The <strong>workaround for this problem</strong> can be found in 
<a href="https://askubuntu.com/a/1053594/1583296">this thread</a>: Configure <code>gpg</code> to use different 
locations for the sockets by 
<a href="https://github.com/sobolevn/git-secret/issues/806#issuecomment-1084202671">placing additional <code>gpg</code> configuration files in the <code>.gitsecret/keys</code> directory</a>:</p>

<p><strong>S.gpg-agent</strong></p>

<pre>%Assuan%
socket=/tmp/S.gpg-agent
</pre>

<p><strong>S.gpg-agent.ssh</strong></p>

<pre>%Assuan%
socket=/tmp/S.gpg-agent.ssh
</pre>

<p><strong>gpg-agent.conf</strong></p>

<pre>extra-socket /tmp/S.gpg-agent.extra
browser-socket /tmp/S.gpg-agent.browser
</pre>

<p><!-- generated -->
<a id='adding-listing-and-removing-users'> </a>
<!-- /generated --></p>

<h5>Adding, listing and removing users</h5>

<p>To <strong>add a new user</strong>, you must first <a href="#export-list-and-import-public-gpg-keys">import its public gpg key</a>. Then
run:</p>

<pre>email="pascal.landau@example.com"
git secret tell "$email"
</pre>

<p>In this case, the user <code>pascal.landau@example.com</code> will now be able to decrypt the secrets.</p>

<p>To <strong>show the users</strong> run</p>

<pre>git secret whoknows
</pre>

<pre>$ git secret whoknows
pascal.landau@example.com
</pre>

<p><strong>To remove a user</strong>, run</p>

<pre>email="pascal.landau@example.com"
git secret killperson "$email"
</pre>

<p>FYI: This command was renamed to <code>removeperson</code> in <code>git-secret &gt;= 0.5.0</code></p>

<pre>$ git secret killperson pascal.landau@example.com
git-secret: removed keys.
git-secret: now [pascal.landau@example.com] do not have an access to the repository.
git-secret: make sure to hide the existing secrets again.
</pre>

<p>User <code>pascal.landau@example.com</code> will no longer be able to decrypt the secrets.</p>

<p><strong>Caution: The secrets need to be re-encrypted after removing a user!</strong></p>

<p><!-- generated -->
<a id='reminder-rotate-the-encrypted-secrets'> </a>
<!-- /generated --></p>

<h6>Reminder: Rotate the encrypted secrets</h6>

<p>Please be aware that <strong>not only your secrets are stored in git, but who had access as well</strong>. I.e. 
even if you remove a user and re-encrypt the secrets, that user would <strong>still be able to decrypt 
the secrets of a previous commit</strong> (when the user was still added). In consequence, <strong>you need 
to rotate the encrypted secrets themselves as well after removing a user</strong>.</p>

<p>But isn't that a great flaw in the system, making it a bad idea to use <code>git-secret</code> in general?</p>

<p>In my opinion: No.</p>

<p>If the removed user had access to the secrets at <strong>any</strong> point in time (no 
matter where they have been stored), he could very well have just created a local copy or simply 
"written them down". In terms of security there is really no "added downside" due to <code>git-secret</code>.
It just makes it <em>very</em> clear that you <em>must</em> rotate the secrets ¯&#92;&#95;(ツ)&#95;/¯</p>

<p>See also this 
<a href="https://news.ycombinator.com/item?id=11663403">lengthy discussion on <code>git-secret</code> on Hacker News</a>.</p>

<p><!-- generated -->
<a id='adding-listing-and-removing-files-for-encryption'> </a>
<!-- /generated --></p>

<h5>Adding, listing and removing files for encryption</h5>

<p>Run <code>git secret add [filenames...]</code> for <strong>files you want to encrypt</strong>. Example:</p>

<pre>git secret add .env
</pre>

<p>If <code>.env</code> is not added in <code>.gitignore</code>, <code>git-secret</code> will display a warning and add it 
automatically.</p>

<pre>git-secret: these files are not in .gitignore: .env
git-secret: auto adding them to .env
git-secret: 1 item(s) added.
</pre>

<p>Otherwise, the file is added with no warning.</p>

<pre>$ git secret add .env
git-secret: 1 item(s) added.
</pre>

<p>You only need to add files once. They are then stored in <code>.gitsecret/paths/mapping.cfg</code>:</p>

<pre>$ cat .gitsecret/paths/mapping.cfg
.env:505070fc20233cb426eac6a3414399d0f466710c993198b1088e897fdfbbb2d5
</pre>

<p>You can also show the added files via</p>

<pre>git secret list
</pre>

<pre>$ git secret list
.env
</pre>

<p><strong>Caution: The files are not yet encrypted!</strong></p>

<p>If you want to <strong>remove a file from being encrypted</strong>, run</p>

<pre>git secret remove .env
</pre>

<p>Output</p>

<pre>$ git secret remove .env
git-secret: removed from index.
git-secret: ensure that files: [.env] are now not ignored.
</pre>

<p><!-- generated -->
<a id='encrypt-files'> </a>
<!-- /generated --></p>

<h5>Encrypt files</h5>

<p>To actually <strong>encrypt the files</strong>, run:</p>

<pre>git secret hide
</pre>

<p>Output:</p>

<pre>$ git secret hide
git-secret: done. 1 of 1 files are hidden.
</pre>

<p>The encrypted (binary) file is stored at <code>$filename.secret</code>, i.e. <code>.env.secret</code> in this case:</p>

<pre>$ cat .env.secret
�☺♀♥�H~�B�Ӯ☺�"��▼♂F�►���l�Cs��S�@MHWs��e������{♣♫↕↓�L� ↕s�1�J$◄♥�;���ǆ֕�Za�����\u�ٲ&amp; ¶��V�► ���6��
;&lt;�d:��}ҨD%.�;��&amp;��G����vWW�]&gt;���߶��▲;D�+Rs�S→�Y!&amp;J��۪8���ٔF��→f����*��$♠���&amp;RC�8▼♂�☻z h��Z0M�T&gt;
</pre>

<p>The encrypted files are de-cryptable <strong>for all users that have been added via <code>git secret tell</code></strong>. 
That also means that you need to <strong>run this command again whenever a new user is added</strong>.</p>

<p><!-- generated -->
<a id='decrypting-files'> </a>
<!-- /generated --></p>

<hr/><p><b>Due to technical constraints, this article is capped at 30000 characters. Read the full content at <a href='https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/'>Use git-secret to encrypt secrets in the repository [Tutorial Part 6]</a></b></p>
]]></description>
                <pubDate>Mon, 25 Apr 2022 06:00:00 +0000</pubDate>
                <link>https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/?utm_source=blog&amp;utm_medium=rss&amp;utm_campaign=feed-codeproject-com</link>
                <guid isPermaLink="true">https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/</guid>
            </item>
                    <item>
                <title>Set up PHP QA tools and control them via make [Tutorial Part 5]</title>
                <description><![CDATA[<p>This article appeared first on <a href='https://www.pascallandau.com/'>https://www.pascallandau.com/</a> at <a href='https://www.pascallandau.com/blog/php-qa-tools-make-docker/'>Set up PHP QA tools and control them via make [Tutorial Part 5]</a></p>
<hr />

<p>In the fifth part of this tutorial series on developing PHP on Docker we will <strong>setup some PHP code
quality tools</strong> and provide a convenient way to control them via GNU make.</p>

<p><a href="https://www.pascallandau.com/img/php-qa-tools-make-docker/run-qa-tools.gif"><img src="https://www.pascallandau.com/img/php-qa-tools-make-docker/run-qa-tools.gif" alt="Run QA tools" /></a></p>

<p><small>
FYI: Originally I wanted
this tutorial to be a part of 
<a href="https://www.pascallandau.com/blog/ci-pipeline-docker-php-gitlab-github/">Create a CI pipeline for dockerized PHP Apps</a>
because QA checks are imho vital part of a CI setup - but it kinda grew "too big" and took a way 
too much space from, well, actually setting up the CI pipelines :)
</small></p>

<div class="youtube">
<iframe width="560" height="315" src="https://www.youtube.com/embed/ocM4ktjqwIg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<p><strong>All code samples are publicly available</strong> in my
<a href="https://github.com/paslandau/docker-php-tutorial/">Docker PHP Tutorial repository on Github</a>.<br />
You find the branch with the final result of this tutorial at
<a href="https://github.com/paslandau/docker-php-tutorial/tree/part-5-php-qa-tools-make-docker">part-5-php-qa-tools-make-docker</a>.</p>

<p><strong>All published parts of the Docker PHP Tutorial</strong> are collected under a dedicated page at
<a href="https://www.pascallandau.com/docker-php-tutorial/">Docker PHP Tutorial</a>. The previous part was
<a href="https://www.pascallandau.com/blog/run-laravel-9-docker-in-2022/">Run Laravel 9 on Docker in 2022</a>
and the following one is
<a href="https://www.pascallandau.com/blog/git-secret-encrypt-repository-docker/">Use <code>git-secret</code> to encrypt secrets in the repository</a>.</p>

<p>If you want to follow along, please subscribe to the <a href="https://www.pascallandau.com/feed.xml">RSS feed</a>
or <a href="#newsletter">via email</a>
to get <strong>automatic notifications</strong> when the next part comes out :)</p>

<p><!-- generated -->
<a id='table-of-contents'> </a>
<!-- /generated --></p>

<h2>Table of contents</h2>

<!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a>

<ul>
<li><a href="#the-qa-tools">The QA tools</a>

<ul>
<li><a href="#phpcs-and-phpcbf">phpcs and phpcbf</a></li>
<li><a href="#phpstan">phpstan</a></li>
<li><a href="#php-parallel-lint">php-parallel-lint</a></li>
<li><a href="#composer-require-checker">composer-require-checker</a></li>
<li><a href="#additional-tools-out-of-scope">Additional tools (out of scope)</a></li>
</ul></li>
<li><a href="#qa-make-targets">QA make targets</a>

<ul>
<li><a href="#the-qa-target">The <code>qa</code> target</a></li>
<li><a href="#the-execute-function">The <code>execute</code> "function"</a></li>
<li><a href="#parallel-execution-and-a-helper-target">Parallel execution and a helper target</a></li>
<li><a href="#sprinkle-some-color-on-top">Sprinkle some color on top</a></li>
</ul></li>
<li><a href="#further-updates-in-the-codebase">Further updates in the codebase</a></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ul></li>
</ul>

<!-- /toc -->

<p><!-- generated -->
<a id='introduction'> </a>
<!-- /generated --></p>

<h2>Introduction</h2>

<p>Code quality tools ensure a <strong>baseline of code quality</strong> by automatically checking certain rules,
e.g. <strong>code style definitions</strong>, proper <strong>usage of types</strong>, proper <strong>declaration of dependencies</strong>,
etc. When run regularly they are a great way to enforce better code and are thus a
<strong>perfect fit for a CI pipeline</strong>. For this tutorial, I'm going to setup the following tools:</p>

<ul>
<li><a href="#phpcs-and-phpcbf">Style Checker: phpcs</a></li>
<li><a href="#phpstan">Static Analyzer: phpstan</a></li>
<li><a href="#php-parallel-lint">Code Linter: php-parallel-lint</a></li>
<li><a href="#composer-require-checker">Dependency Checker: composer-require-checker</a></li>
</ul>

<p>and provide convenient access through a <a href="#the-qa-target"><code>qa</code> make target</a>. The end result will look
like this:</p>

<p><a href="https://www.pascallandau.com/img/php-qa-tools-make-docker/qa-tool-output.PNG"><img src="https://www.pascallandau.com/img/php-qa-tools-make-docker/qa-tool-output.PNG" alt="QA tool output" /></a></p>

<p>FYI: When we started out with using code quality tools in general, we have used 
<a href="https://github.com/phpro/grumphp">GrumPHP</a> - and I would still recommend it. We have only 
transitioned away from it because <code>make</code> gives us a little more flexibility and control.</p>

<p>You can find the "final" makefile
at <a href="https://github.com/paslandau/docker-php-tutorial/blob/part-5-php-qa-tools-make-docker/.make/01-02-application-qa.mk"><code>.make/01-02-application-qa.mk</code></a>.</p>

<p><strong>CAUTION</strong>: The <code>Makefile</code> is build on top of the setup that I introduced in
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/">Docker from scratch for PHP 8.1 Applications in 2022</a>, 
so please refer to that tutorial if anything is not clear.</p>

<pre>##@ [Application: QA]

# variables
CORES?=$(shell (nproc  || sysctl -n hw.ncpu) 2&gt; /dev/null)

# constants
 ## files
ALL_FILES=./
APP_FILES=app/
TEST_FILES=tests/

 ## bash colors
RED:=\033[0;31m
GREEN:=\033[0;32m
YELLOW:=\033[0;33m
NO_COLOR:=\033[0m

# Tool CLI config
PHPUNIT_CMD=php vendor/bin/phpunit
PHPUNIT_ARGS= -c phpunit.xml
PHPUNIT_FILES=
PHPSTAN_CMD=php vendor/bin/phpstan analyse
PHPSTAN_ARGS=--level=9
PHPSTAN_FILES=$(APP_FILES) $(TEST_FILES)
PHPCS_CMD=php vendor/bin/phpcs
PHPCS_ARGS=--parallel=$(CORES) --standard=psr12
PHPCS_FILES=$(APP_FILES)
PHPCBF_CMD=php vendor/bin/phpcbf
PHPCBF_ARGS=$(PHPCS_ARGS)
PHPCBF_FILES=$(PHPCS_FILES)
PARALLEL_LINT_CMD=php vendor/bin/parallel-lint
PARALLEL_LINT_ARGS=-j 4 --exclude vendor/ --exclude .docker --exclude .git
PARALLEL_LINT_FILES=$(ALL_FILES)
COMPOSER_REQUIRE_CHECKER_CMD=php vendor/bin/composer-require-checker
COMPOSER_REQUIRE_CHECKER_ARGS=--ignore-parse-errors

# call with NO_PROGRESS=true to hide tool progress (makes sense when invoking multiple tools together)
NO_PROGRESS?=false
ifeq ($(NO_PROGRESS),true)
    PHPSTAN_ARGS+= --no-progress
    PARALLEL_LINT_ARGS+= --no-progress
else
    PHPCS_ARGS+= -p
    PHPCBF_ARGS+= -p
endif

# Use NO_PROGRESS=false when running individual tools.
# On  NO_PROGRESS=true  the corresponding tool has no output on success
#                       apart from its runtime but it will still print 
#                       any errors that occured. 
define execute
    if [ "$(NO_PROGRESS)" = "false" ]; then \
        eval "$(EXECUTE_IN_APPLICATION_CONTAINER) $(1) $(2) $(3) $(4)"; \
    else \
        START=$$(date +%s); \
        printf "%-35s" "$@"; \
        if OUTPUT=$$(eval "$(EXECUTE_IN_APPLICATION_CONTAINER) $(1) $(2) $(3) $(4)" 2&gt;&amp;1); then \
            printf " $(GREEN)%-6s$(NO_COLOR)" "done"; \
            END=$$(date +%s); \
            RUNTIME=$$((END-START)) ;\
            printf " took $(YELLOW)$${RUNTIME}s$(NO_COLOR)\n"; \
        else \
            printf " $(RED)%-6s$(NO_COLOR)" "fail"; \
            END=$$(date +%s); \
            RUNTIME=$$((END-START)) ;\
            printf " took $(YELLOW)$${RUNTIME}s$(NO_COLOR)\n"; \
            echo "$$OUTPUT"; \
            printf "\n"; \
            exit 1; \
        fi; \
    fi
endef

.PHONY: test
test: ## Run all tests
    @$(EXECUTE_IN_APPLICATION_CONTAINER) $(PHPUNIT_CMD) $(PHPUNIT_ARGS) $(ARGS)

.PHONY: phplint
phplint: ## Run phplint on all files
    @$(call execute,$(PARALLEL_LINT_CMD),$(PARALLEL_LINT_ARGS),$(PARALLEL_LINT_FILES), $(ARGS))

.PHONY: phpcs
phpcs: ## Run style check on all application files
    @$(call execute,$(PHPCS_CMD),$(PHPCS_ARGS),$(PHPCS_FILES), $(ARGS))

.PHONY: phpcbf
phpcbf: ## Run style fixer on all application files
    @$(call execute,$(PHPCBF_CMD),$(PHPCBF_ARGS),$(PHPCBF_FILES), $(ARGS))

.PHONY: phpstan
phpstan:  ## Run static analyzer on all application and test files 
    @$(call execute,$(PHPSTAN_CMD),$(PHPSTAN_ARGS),$(PHPSTAN_FILES), $(ARGS))

.PHONY: composer-require-checker
composer-require-checker: ## Run dependency checker
    @$(call execute,$(COMPOSER_REQUIRE_CHECKER_CMD),$(COMPOSER_REQUIRE_CHECKER_ARGS),"", $(ARGS))

.PHONY: qa
qa: ## Run code quality tools on all files
    @"$(MAKE)" -j $(CORES) -k --no-print-directory --output-sync=target qa-exec NO_PROGRESS=true

.PHONY: qa-exec
qa-exec: phpstan \
    phplint \
    composer-require-checker \
    phpcs
</pre>

<p><!-- generated -->
<a id='the-qa-tools'> </a>
<!-- /generated --></p>

<h2>The QA tools</h2>

<p><!-- generated -->
<a id='phpcs-and-phpcbf'> </a>
<!-- /generated --></p>

<h3>phpcs and phpcbf</h3>

<p><code>phpcs</code> is the CLI tool of the style checker
<a href="https://github.com/squizlabs/PHP_CodeSniffer">squizlabs/PHP_CodeSniffer</a>. It also comes with
<code>phpcbf</code> - a tool to automatically fix style errors.</p>

<p>Installation via composer:</p>

<pre>make composer ARGS="require --dev squizlabs/php_codesniffer"
</pre>

<p>For now we will simply use the pre-configured ruleset for
<a href="https://www.php-fig.org/psr/psr-12/">PSR-12: Extended Coding Style</a>. When run in the <code>application</code>
container for the first time on the <code>app</code> directory via</p>

<pre>vendor/bin/phpcs --standard=PSR12 --parallel=4 -p app
</pre>

<p>i.e.</p>

<pre>--standard=PSR12 =&gt; use the PSR12 ruleset
--parallel=4     =&gt; run with 4 parallel processes
-p               =&gt; show the progress
</pre>

<p>we get the following result:</p>

<pre>root:/var/www/app# vendor/bin/phpcs --standard=PSR12 --parallel=4 -p app

FILE: /var/www/app/app/Console/Kernel.php
----------------------------------------------------------------------
FOUND 2 ERRORS AFFECTING 1 LINE
----------------------------------------------------------------------
 28 | ERROR | [x] Expected at least 1 space before "."; 0 found
 28 | ERROR | [x] Expected at least 1 space after "."; 0 found
----------------------------------------------------------------------
PHPCBF CAN FIX THE 2 MARKED SNIFF VIOLATIONS AUTOMATICALLY
----------------------------------------------------------------------


FILE: /var/www/app/app/Http/Controllers/HomeController.php
----------------------------------------------------------------------
FOUND 4 ERRORS AFFECTING 2 LINES
----------------------------------------------------------------------
 37 | ERROR | [x] Expected at least 1 space before "."; 0 found
 37 | ERROR | [x] Expected at least 1 space after "."; 0 found
 45 | ERROR | [x] Expected at least 1 space before "."; 0 found
 45 | ERROR | [x] Expected at least 1 space after "."; 0 found
----------------------------------------------------------------------
PHPCBF CAN FIX THE 4 MARKED SNIFF VIOLATIONS AUTOMATICALLY
----------------------------------------------------------------------


FILE: /var/www/app/app/Jobs/InsertInDbJob.php
-------------------------------------------------------------------------------
FOUND 1 ERROR AFFECTING 1 LINE
-------------------------------------------------------------------------------
 13 | ERROR | [x] Each imported trait must have its own "use" import statement
-------------------------------------------------------------------------------
PHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY
-------------------------------------------------------------------------------


FILE: /var/www/app/app/Models/User.php
-------------------------------------------------------------------------------
FOUND 1 ERROR AFFECTING 1 LINE
-------------------------------------------------------------------------------
 13 | ERROR | [x] Each imported trait must have its own "use" import statement
-------------------------------------------------------------------------------
PHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY
-------------------------------------------------------------------------------
</pre>

<p>All errors can be fixed automatically with <code>phpcbf</code>:</p>

<pre>root:/var/www/app# vendor/bin/phpcbf --standard=PSR12 --parallel=4 -p app

PHPCBF RESULT SUMMARY
-------------------------------------------------------------------------
FILE                                                     FIXED  REMAINING
-------------------------------------------------------------------------
/var/www/app/app/Console/Kernel.php                      2      0
/var/www/app/app/Http/Controllers/HomeController.php     4      0
/var/www/app/app/Jobs/InsertInDbJob.php                  1      0
/var/www/app/app/Models/User.php                         1      0
-------------------------------------------------------------------------
A TOTAL OF 8 ERRORS WERE FIXED IN 4 FILES
-------------------------------------------------------------------------

Time: 411ms; Memory: 8MB
</pre>

<p>and a follow-up run of <code>phpcs</code> doesn't show any more errors:</p>

<pre>root:/var/www/app# vendor/bin/phpcs --standard=PSR12 --parallel=4 -p app
.................... 20 / 20 (100%)


Time: 289ms; Memory: 8MB
</pre>

<p><!-- generated -->
<a id='phpstan'> </a>
<!-- /generated --></p>

<h3>phpstan</h3>

<p><code>phpstan</code> is the CLI tool of the static code analyzer
<a href="https://github.com/phpstan/phpstan">phpstan/phpstan</a> (see also the
<a href="https://phpstan.org/user-guide/getting-started">full PHPStan documentation</a>). It provides some
default "levels" of increasing strictness to report potential bugs based on the AST of the analyzed
PHP code.</p>

<p>Installation via composer:</p>

<pre>make composer ARGS="require --dev phpstan/phpstan"
</pre>

<p>Since this is a "fresh" codebase with very little code let's go for the
<a href="https://phpstan.org/user-guide/rule-levels">highest level 9</a> (as of 2022-04-24) and run it in the
<code>application</code> container on the <code>app</code> and <code>tests</code> directories via:</p>

<pre>vendor/bin/phpstan analyse app tests --level=9

--level=9        =&gt; use level 9
</pre>

<pre>root:/var/www/app# vendor/bin/phpstan analyse app tests --level=9
 25/25 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%

 ------ ------------------------------------------------------------------------------------------------------------------
  Line   app/Commands/SetupDbCommand.php
 ------ ------------------------------------------------------------------------------------------------------------------
  22     Method App\Commands\SetupDbCommand::getOptions() return type has no value type specified in iterable type array.
         � See: https://phpstan.org/blog/solving-phpstan-no-value-type-specified-in-iterable-type
  34     Method App\Commands\SetupDbCommand::handle() has no return type specified.
 ------ ------------------------------------------------------------------------------------------------------------------

 ------ -------------------------------------------------------------------------------------------------------
  Line   app/Http/Controllers/HomeController.php
 ------ -------------------------------------------------------------------------------------------------------
  22     Parameter #1 $jobId of class App\Jobs\InsertInDbJob constructor expects string, mixed given.
  25     Part $jobId (mixed) of encapsed string cannot be cast to string.
  35     Call to an undefined method Illuminate\Redis\Connections\Connection::lRange().
  62     Call to an undefined method Illuminate\Contracts\View\Factory|Illuminate\Contracts\View\View::with().
 ------ -------------------------------------------------------------------------------------------------------

 ------ ------------------------------------------------------------------------------------------------------------------
  Line   app/Http/Middleware/Authenticate.php
 ------ ------------------------------------------------------------------------------------------------------------------
  17     Method App\Http\Middleware\Authenticate::redirectTo() should return string|null but return statement is missing.
 ------ ------------------------------------------------------------------------------------------------------------------

 ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Line   app/Http/Middleware/RedirectIfAuthenticated.php
 ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  26     Method App\Http\Middleware\RedirectIfAuthenticated::handle() should return Illuminate\Http\RedirectResponse|Illuminate\Http\Response but returns Illuminate\Http\RedirectResponse|Illuminate\Routing\Redirector.
 ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 ------ -----------------------------------------------------------------------
  Line   app/Jobs/InsertInDbJob.php
 ------ -----------------------------------------------------------------------
  22     Method App\Jobs\InsertInDbJob::handle() has no return type specified.
 ------ -----------------------------------------------------------------------

 ------ -------------------------------------------------
  Line   app/Providers/RouteServiceProvider.php
 ------ -------------------------------------------------
  36     PHPDoc tag @var above a method has no effect.
  36     PHPDoc tag @var does not specify variable name.
  60     Cannot access property $id on mixed.
 ------ -------------------------------------------------

 ------ ----------------------------------------------------------------------------------------------------------------------------------------------------------
  Line   tests/Feature/App/Http/Controllers/HomeControllerTest.php
 ------ ----------------------------------------------------------------------------------------------------------------------------------------------------------
  24     Method Tests\Feature\App\Http\Controllers\HomeControllerTest::test___invoke() has parameter $params with no value type specified in iterable type array.
         � See: https://phpstan.org/blog/solving-phpstan-no-value-type-specified-in-iterable-type
  38     Method Tests\Feature\App\Http\Controllers\HomeControllerTest::__invoke_dataProvider() return type has no value type specified in iterable type array.
         � See: https://phpstan.org/blog/solving-phpstan-no-value-type-specified-in-iterable-type
 ------ ----------------------------------------------------------------------------------------------------------------------------------------------------------

 ------ ---------------------------------------------------------------------------------------------------------------------
  Line   tests/TestCase.php
 ------ ---------------------------------------------------------------------------------------------------------------------
  68     Cannot access offset 'database' on mixed.
  71     Parameter #1 $config of method Illuminate\Database\Connectors\MySqlConnector::connect() expects array, mixed given.
 ------ ---------------------------------------------------------------------------------------------------------------------


 [ERROR] Found 16 errors
</pre>

<p>After fixing (or ignoring :P) all errors, we now get</p>

<pre>root:/var/www/app# vendor/bin/phpstan analyse app tests --level=9
25/25 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%

[OK] No errors
</pre>

<p><!-- generated -->
<a id='php-parallel-lint'> </a>
<!-- /generated --></p>

<h3>php-parallel-lint</h3>

<p><code>php-parallel-lint</code> is the CLI tool of the PHP code linter
<a href="https://github.com/php-parallel-lint/PHP-Parallel-Lint">php-parallel-lint/PHP-Parallel-Lint</a>. It
ensures that all PHP files are syntactically correct.</p>

<p>Installation via composer:</p>

<pre>make composer ARGS="require --dev php-parallel-lint/php-parallel-lint"
</pre>

<p>"Parallel" is already in the name, so we run it on the full codebase <code>./</code> with 4 parallel processes 
and exclude the <code>.git</code> and <code>vendor</code> directories to speed up the execution via</p>

<pre>vendor/bin/parallel-lint -j 4 --exclude .git --exclude vendor ./
</pre>

<p>i.e.</p>

<pre>-j 4                              =&gt; use 4 parallel processes
--exclude .git --exclude vendor   =&gt; ignore the .git/ and vendor/ directories
</pre>

<p>we get</p>

<pre>root:/var/www/app# vendor/bin/parallel-lint -j 4 --exclude .git --exclude vendor ./
PHP 8.1.1 | 4 parallel jobs
............................................................ 60/61 (98 %)
.                                                            61/61 (100 %)


Checked 61 files in 0.2 seconds
No syntax error found
</pre>

<p>No further TODOs here.</p>

<p><!-- generated -->
<a id='composer-require-checker'> </a>
<!-- /generated --></p>

<h3>composer-require-checker</h3>

<p><code>composer-require-checker</code> is the CLI tool of the dependency checker
<a href="https://github.com/maglnet/ComposerRequireChecker">maglnet/ComposerRequireChecker</a>. The tool
ensures that the <code>composer.json</code> file contains all dependencies that are used in the codebase.</p>

<p>Installation via composer:</p>

<pre>make composer ARGS="require --dev maglnet/composer-require-checker"
</pre>

<p>Run it via</p>

<pre>vendor/bin/composer-require-checker check
</pre>

<pre>root:/var/www/app# vendor/bin/composer-require-checker check
ComposerRequireChecker 4.0.0@baa11a4e9e5072117e3d180ef16c07036cafa4a2
The following 1 unknown symbols were found:
+---------------------------------------------+--------------------+
| Unknown Symbol                              | Guessed Dependency |
+---------------------------------------------+--------------------+
| Symfony\Component\Console\Input\InputOption |                    |
+---------------------------------------------+--------------------+
</pre>

<p>What's going on here?</p>

<p>We use <code>Symfony\Component\Console\Input\InputOption</code> in our <code>\App\Commands\SetupDbCommand</code> and the
code doesn't "fail" because <code>InputOption</code> is defined in the<code>symfony/console</code> package that is a
<strong>transitive dependency</strong> of <code>laravel/framework</code>, see the
<a href="https://github.com/laravel/framework/blob/5b113dad7d2c88e15b65d987ca63f03b2be43e6a/composer.json#L34"><code>laravel/framework composer.json</code></a>
file.</p>

<p>I.e. the <code>symfony/console</code> package <strong>does actually exist</strong> in our <code>vendor</code> directory - but
since we also use it <em>as a first-party-dependency directly in our code</em>, we must declare the
dependency explicitly. Otherwise, Laravel might at some point decide to drop <code>symfony/console</code>
and we would be left with broken code.</p>

<p>To fix this, I run</p>

<pre>make composer ARGS="require symfony/console"
</pre>

<p>which will update the <code>composer.json</code> file and add the dependency. Running
<code>composer-require-checker</code> again will now yield no further errors.</p>

<pre>root:/var/www/app# vendor/bin/composer-require-checker check
ComposerRequireChecker 4.0.0@baa11a4e9e5072117e3d180ef16c07036cafa4a2
There were no unknown symbols found.
</pre>

<p><!-- generated -->
<a id='additional-tools-out-of-scope'> </a>
<!-- /generated --></p>

<h3>Additional tools (out of scope)</h3>

<p>In general, I'm a huge fan of code quality tools and we use them quite extensively. At some 
point I'll probably dedicate a whole article to go over them in detail - but for now I'm just 
gonna leave a list for inspiration:</p>

<ul>
<li><a href="https://packagist.org/packages/brianium/paratest">brianium/paratest</a>

<ul>
<li>Running PhpUnit tests in parallel</li>
</ul></li>
<li><a href="https://packagist.org/packages/malukenho/mcbumpface">malukenho/mcbumpface</a>

<ul>
<li>Update the versions in the <code>composer.json</code> file after an update</li>
</ul></li>
<li><a href="https://packagist.org/packages/qossmic/deptrac-shim">qossmic/deptrac-shim</a>

<ul>
<li>A shim for <a href="https://packagist.org/packages/qossmic/deptrac">qossmic/deptrac</a>: 
A tool to define dependency layers based on e.g. namespaces</li>
</ul></li>
<li><a href="https://packagist.org/packages/icanhazstring/composer-unused">icanhazstring/composer-unused</a>

<ul>
<li>Show dependencies in the <code>composer.json</code> that are not used in the codebase</li>
</ul></li>
<li><a href="https://packagist.org/packages/roave/security-advisories">roave/security-advisories</a>

<ul>
<li>Gives a warning when packages with known vulnerabilities are used</li>
<li>Alternative: <a href="https://github.com/fabpot/local-php-security-checker/">local-php-security-checker</a></li>
</ul></li>
</ul>

<p><!-- generated -->
<a id='qa-make-targets'> </a>
<!-- /generated --></p>

<h2>QA make targets</h2>

<p>You might have noticed that <strong>all tools have their own configuration options</strong>. Instead of
remembering each of them, I'll define corresponding make targets in <code>.make/01-02-application-qa.mk</code>.
The easiest way to do so would be to "hard-code" the exact commands that I ran previously, e.g.</p>

<pre>.PHONY: phpstan
phpstan:  ## Run static analyzer on all application and test files 
    @$(EXECUTE_IN_APPLICATION_CONTAINER) vendor/bin/phpstan analyse app tests --level=9
</pre>

<p>(Please refer to the
<a href="https://www.pascallandau.com/blog/docker-from-scratch-for-php-applications-in-2022/#run-commands-in-the-docker-containers">Run commands in the docker containers</a>
section in the previous tutorial for an explanation of the <code>EXECUTE_IN_APPLICATION_CONTAINER</code> 
variable).</p>

<p>However, this implementation is quite inflexible: What if we want to check a single file or try out
other options? So let's create some variables instead:</p>

<pre>PHPSTAN_CMD=php vendor/bin/phpstan analyse
PHPSTAN_ARGS=--level=9
PHPSTAN_FILES=$(APP_FILES) $(TEST_FILES)

.PHONY: phpstan
phpstan: ## Run static analyzer on all application and test files 
    @$(EXECUTE_IN_APPLICATION_CONTAINER) $(PHPSTAN_CMD) $(PHPSTAN_ARGS) $(PHPSTAN_FILES) 
</pre>

<p>This target allows me to override the defaults and e.g. check only the file 
<code>app/Commands/SetupDbCommand.php</code> with <code>--level=1</code></p>

<pre>make phpstan PHPSTAN_FILES=app/Commands/SetupDbCommand.php PHPSTAN_ARGS="--level=1" 
</pre>

<pre>$ make phpstan PHPSTAN_FILES=app/Commands/SetupDbCommand.php PHPSTAN_ARGS="--level=1" 
 1/1 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%


 [OK] No errors
</pre>

<p>The remaining tool variables can be configured in the exact same way:</p>

<pre># constants
 ## files
ALL_FILES=./
APP_FILES=app/
TEST_FILES=tests/

# Tool CLI config
PHPUNIT_CMD=php vendor/bin/phpunit
PHPUNIT_ARGS= -c phpunit.xml
PHPUNIT_FILES=
PHPSTAN_CMD=php vendor/bin/phpstan analyse
PHPSTAN_ARGS=--level=9
PHPSTAN_FILES=$(APP_FILES) $(TEST_FILES)
PHPCS_CMD=php vendor/bin/phpcs
PHPCS_ARGS=--parallel=$(CORES) --standard=psr12
PHPCS_FILES=$(APP_FILES)
PHPCBF_CMD=php vendor/bin/phpcbf
PHPCBF_ARGS=$(PHPCS_ARGS)
PHPCBF_FILES=$(PHPCS_FILES)
PARALLEL_LINT_CMD=php vendor/bin/parallel-lint
PARALLEL_LINT_ARGS=-j 4 --exclude vendor/ --exclude .docker --exclude .git
PARALLEL_LINT_FILES=$(ALL_FILES)
COMPOSER_REQUIRE_CHECKER_CMD=php vendor/bin/composer-require-checker
COMPOSER_REQUIRE_CHECKER_ARGS=--ignore-parse-errors
</pre>

<p><!-- generated -->
<a id='the-qa-target'> </a>
<!-- /generated --></p>

<h3>The <code>qa</code> target</h3>

<p>From a workflow perspective I usually want to <strong>run all configured qa tools</strong> instead of each one
individually (being able to run individually is still great if a tool fails, though).</p>

<p>A trivial approach would be a new target that <strong>uses all individual tool targets as preconditions</strong>:</p>

<pre>.PHONY: qa
qa: phpstan \
    phplint \
    composer-require-checker \
    phpcs
</pre>

<p>But we can do better, because this target produces quite a noisy output:</p>

<pre>$ make qa
 25/25 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%


 [OK] No errors

PHP 8.1.1 | 4 parallel jobs
............................................................ 60/61 (98 %)
.                                                            61/61 (100 %)


Checked 61 files in 0.3 seconds
No syntax error found
ComposerRequireChecker 4.0.0@baa11a4e9e5072117e3d180ef16c07036cafa4a2
There were no unknown symbols found.
.................... 20 / 20 (100%)


Time: 576ms; Memory: 8MB
</pre>

<p>I'd rather have something like this:</p>

<pre>$ make qa
phplint                             done   took 1s
phpcs                               done   took 1s
phpstan                             done   took 3s
composer-require-checker            done   took 6s
</pre>

<p><!-- generated -->
<a id='the-execute-function'> </a>
<!-- /generated --></p>

<hr/><p><b>Due to technical constraints, this article is capped at 30000 characters. Read the full content at <a href='https://www.pascallandau.com/blog/php-qa-tools-make-docker/'>Set up PHP QA tools and control them via make [Tutorial Part 5]</a></b></p>
]]></description>
                <pubDate>Mon, 25 Apr 2022 05:00:00 +0000</pubDate>
                <link>https://www.pascallandau.com/blog/php-qa-tools-make-docker/?utm_source=blog&amp;utm_medium=rss&amp;utm_campaign=feed-codeproject-com</link>
                <guid isPermaLink="true">https://www.pascallandau.com/blog/php-qa-tools-make-docker/</guid>
            </item>
            </channel>
</rss>
